PROCEDURE global GENERATE_OPERATIONS
{
GENERATE_DEVICES
}

PROCEDURE global GENERATE_DEVICES {
# Get all devices class inside actual model
CC "Modeling" GET_ACT_MODEL
SETL modelID:(modelid)
CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:"Device"
SETG devices:(map())
FOR deviceId in:(objids) {
    # get all operations defined inside each device table
    CC "Core" GET_ATTR_VAL objid:(VAL deviceId) attrname:("Name")
    SETL devices[deviceId]:({
        "Name": val,
        "Operations": {}
    })
    CC "Core" GET_CLASS_ID objid:(VAL deviceId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("Operations")
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(VAL deviceId) attrid:(attrid)
    SETL device:(devices[deviceId])
    SETL operations:({})
    # Get operations specifications
    FOR row in:(rowids) {
        SETL operation:(map())
        CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Operation")
        SETL operation["Name"]:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Description")
        SETL operation["Description"]:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Required")
        SETL operation["Required"]:(val)
        SETL n:(aappend(operations, operation))
    }
    SETL device["Operations"]:(operations)
    SETL devices[deviceId]:(device)
}
CC "Core" CREATE_COPYBUFFER index:0
CC "Core" FILL_COPYBUFFER index:0 instids:(objids) relinstids:("")
# CC "AdoScript" INFOBOX (STR devices)
CREATE_NEW_MODEL
}

PROCEDURE global CREATE_NEW_MODEL {
# Select a target model group
CC "CoreUI" MODEL_SELECT_BOX without-models mgroup-sel title:"Select at least one target modelgroup"
IF (endbutton != "ok") {
SETL targetID:-1
EXIT
}

SETL a_mgroupids:(mgroupids)

# Get actual model name
CC "Core" GET_MODEL_BASENAME modelid:(modelid)
SETL a_mn:(basename)

# Get actual model type (maybe useless)
CC "Core" GET_MODEL_MODELTYPE modelid:(modelid)
SETL a_mt:(modeltype)
SETG a_dstmodelid:0
SETL ecode:1

WHILE (ecode != 0) {
    # Let the user enter a new modelname
    CC "AdoScript" EDITFIELD title:("New model for " + a_mn) caption:("~Modelname:")
    IF (ecode != 0) {
        SETL targetID:-1
        EXIT
    }
    SETL a_name:(text)
    CC "Core" CREATE_MODEL modeltype:("Feature Operation Model") modelname:(a_name) version:"" mgroups:(a_mgroupids)
    IF (ecode = 0) {
        SET a_dstmodelid:(modelid)
    } ELSIF (ecode = 40) {
        CC "AdoScript" ERRORBOX ("A model with the same name already exists") ok
    } ELSE {
        CC "AdoScript" ERRORBOX ("An error occured creating the new model: " + STR errtext) ok
    }
}

CC "Core" GET_CLASS_ID classname:("Device")
SETG deviceClassId:(classid)
CC "Core" GET_CLASS_ID classname:("Operation")
SETG operationClassId:(classid)
CC "Core" PASTE_COPYBUFFER index:0 modelid:(a_dstmodelid)
CC "Core" DELETE_COPYBUFFER index:0
LOAD_OPERATIONS
}

PROCEDURE global LOAD_OPERATIONS {
SETG devIds:""
SETG opIds:""
FOR deviceId in:(mapKeysList(devices)) sep:("~") {
    SETL device:(devices[deviceId])
    SETL name:(device["Name"])
    SETL operations:(device["Operations"])
    SETL n:(operations.length)

    CC "Core" GET_CLASS_NAME objid:(deviceId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("Component")
    CC "Core" GET_OBJ_ID modelid:(a_dstmodelid) classid:(deviceClassId) objname:(name)
    CC "Core" ADD_INTERREF objid:(deviceId) attrid:(attrid) tobjid:(objid) #ricontrollare
    #overwrite deviceId with the one in the new model
    SET deviceId:(objid)
    SET devIds:(devIds + STR objid + " ")

    FOR i from:0 to:(n-1) {
        SETL name:(operations[i]["Name"])
        SETL description:(operations[i]["Description"])
        SETL required:(operations[i]["Required"])
        SETL rand:(name + STR randomDiscreteUniformDist(10000, 99999))

        #create operation
        CC "Core" CREATE_OBJ modelid:(a_dstmodelid) classid:(operationClassId) objname:(rand)
        SET opIds:(opIds + STR objid + " ")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:"Operation Name" val:(name)
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:"Description" val:(description)
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:"Required" val:(required)

        CC "Core" GET_CLASS_ID relation classname:(required)
        CC "Core" CREATE_CONNECTOR modelid:(a_dstmodelid) fromobjid:(deviceId) toobjid:(objid) classid:(classid)
        IF (ecode != 0) {
            CC "AdoScript" ERRORBOX ("Error creating connector: " + errtext)
            EXIT
        }
    }
}
SET_POSITIONS
#fare in modo che posso chiamare set_positions una volta per le ops e una volta per i devs
}

PROCEDURE global SET_POSITIONS {
    # CC "AdoScript" INFOBOX (devIds + " " + opIds)
    CC "Modeling" OPEN modelids:(a_dstmodelid)

    SETG x:(2cm)
    SETG y:(2cm)
    FOR dev in:(devIds) {
        CC "Modeling" SET_OBJ_POS objid:(VAL dev) x:(x) y:(y)
        NEXT_POSITION
    }
    SET x:2cm
    SET y:(y + 6cm)

    FOR op in:(opIds) {
        CC "Modeling" SET_OBJ_POS objid:(VAL op) x:(x) y:(y)
        NEXT_POSITION
    }
    CC "Modeling" REBUILD_DRAWING_AREA
}

PROCEDURE global NEXT_POSITION {
    #-----> RESULT x:measure y:measure
    IF (x > 15cm) {
        SET x:2cm
        SET y:(y + 3cm)
    } ELSE {
        SET x:(x + 4cm)
    }
    CC "Modeling" SAVE modelid:(a_dstmodelid)
}

# reference tra i component per il psm ( il device punta alla reference del pim invece deve puntare al psm )
# bisogna generare il psm di tutti i modelli in automaticoSETL required:(operations[i]["Required"])