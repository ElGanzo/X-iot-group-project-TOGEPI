PROCEDURE global AZURE_DASHBOARD_CREATION
{
	CC "AdoScript" INFOBOX ("Please ensure that devices which has a widget have its own Azure Device Group Id") 

	CC "AdoScript" EDITFIELD title:"Azure's Application URL" caption:"Enter Azure's Application URL:" text:"myazureapplication"
    IF (ecode != 0) {
        EXIT
    }
    SET applicationURL: (text)
	
	# GET API TOKEN 
	SETL headers: (map())
	CC "AdoScript" EDITFIELD title:"Azure's API token" caption:"API token (find it at 'Permissions>API tokens'):" text:"API token"
	IF (ecode != 0) {
        EXIT
    }
	SET apiToken:(text)
	SETL headers["Authorization"]: (apiToken)
	SETL headers["Content-Type"]:("application/json;odata=verbose")

	# Read JSON file
    CC "AdoScript" FREAD file:("db:\\azure.json")
    IF (ecode != 0) {
        CC "AdoScript" ERRORBOX ("The file is not readable!") ok
        EXIT
    }

    # Convert file content to JSON
    SETL specs:(fromJson(text))

	# Get JSON structure from "Azure.json>widget>Line Chart>config"
	CC "Modeling" GET_ACT_MODEL
	CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:("widget")
	SETL widgetID:(0)
	FOR widget in:(objids) {
		SETL widgetID:(VAL widget)
 		BREAK
	}

	SETL class:(map())
	CLASS_PSM specs:(specs) objID:(widgetID) class:class 

	# extract from "Azure.json" the default json structure
	SETL widgetClass:(specs["widget"])
	SETL firstObjectOfArray:(widgetClass[0])

	# line chart & lkv hanno la stessa struttura in "azure.json", sono entrambi utili per Attribute>psm_type
	# e utili all'Utente per selezionare differenti tipi di widgets sulla dashboard di Azure (todo rendere questa cosa meno macchinosa)
	SETL lineChart:(firstObjectOfArray["Line Chart"])
	SETL myConfig:(lineChart["config"])

	SETL myConfig["displayName"]: (applicationURL+" dashboard")

	# defaul objects structure
	SETL myTiles:(myConfig["tiles"])

	SETL tiles:({})

	# fill
	FILL_TILES_ARRAY modelid:modelid tiles:tiles myTiles:myTiles

	SETL myConfig["tiles"]:(tiles)

	SETL jsonReqBody:(lam_toJson(myConfig))

	CC "AdoScript" EDITFIELD title:"Dashboard id" caption:"Enter dashboard id:" text:"mydashboard"
    IF (ecode != 0) {
        EXIT
    }
	SETL dashboardId:(text)

	# and send the updated dashboard by API REST PUT call
	SETL url:("https://"+applicationURL+".azureiotcentral.com/api/dashboards/"+dashboardId+"?api-version=2022-10-31-preview")
	HTTP_SEND_REQUEST(url) str_method:("PUT") map_reqheaders:(headers) str_reqbody:(jsonReqBody) val_respcode:respstat map_respheaders:respheaders str_respbody:str_respbody
} 



PROCEDURE global FILL_TILES_ARRAY
modelid:reference
tiles:reference
myTiles:reference
{
	# 1. for each widget create a line_chart or lkv
	CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:"widget"

	SETL widgetOnDashboard:(myTiles[0]) # tiles' element
	SETL documentationWidget:(myTiles[1]) # last element of tiles -> Documentation widget (by default from Azure)

	# abscissa and ordered
	SETL x:0
	SETL y:0

	FOR widget in:(objids) {

		CC "Core" GET_ATTR_VAL objid:(VAL widget) attrname:"name"
		SETL widgetName:(replall(val, " ", ""))

		# from the Widget, get back to the Device through the Attribute
		CC "Core" GET_CONNECTORS objid:(VAL widget) in
		SETL connid:(token(objids, 0, " "))
		CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid) 
		SETL attribute:(fromobjid)

		CC "Core" GET_ATTR_VAL objid:(attribute) attrname:"name"
		SETL attributeName:(replall(val, " ", ""))

		CC "Core" GET_CONNECTORS objid:(attribute) in
		SETL connid:(token(objids, 0, " "))
		CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
		SETL device:(fromobjid)
		CC "Core" GET_ATTR_VAL objid:(device) attrname:"name"
		SETL deviceName:(replall(val, " ", ""))

		SETL widgetOnDashboard["displayName"]:(deviceName +" - "+widgetName)

		SETL configuration:(widgetOnDashboard["configuration"])

		# improve this code snippet in future, un po' macchinoso!!!
		CC "Core" GET_ATTR_VAL objid:(VAL widget) attrname:"psm_type"
		SETL widgetType:""
		IF (val = "Last Known Value (lkv)") {
			SETL widgetType:"lkv"
		} ELSIF (val = "Line Chart") {
			SETL widgetType:"lineChart"
		} ELSE {
			CC "AdoScript" ERRORBOX ("The widget psm_type cannot be empty!	Select which type of widget it is before sending Dashboard info") ok
			EXIT
		}
		SETL configuration["type"]:(widgetType)


		SETL capabilityObject:(map())
		SETL capabilityObject["capability"]:(attributeName)
		SETL capabilityObject["aggregateFunction"]: ("avg")
		SETL capabilityContainer:({capabilityObject})

		SETL configuration["capabilities"]:(capabilityContainer)
		
		# "Value" coloumn of specification
        CC "Core" GET_CLASS_ID objid:(device)
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
        CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(device) attrid:(attrid)
        FOR row in:(rowids) {
            CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Value")
        }
		SETL configuration["group"]:(val)

		SETL deviceArray:({deviceName})
		SETL configuration["devices"]:(deviceArray)

		# try to insert the widgets in order: in this way it's vertical order (from top to bottom) with 2 widget each line
		IF( x = 2) {
			SETL x:0
			SETL y:(y+2)
		} ELSE {
			SETL x:2
		}

		SETL widgetOnDashboard["configuration"]:(configuration)
		SETL returnParameter:(aappend(tiles, widgetOnDashboard))
	}
	# append the documentation widget at the bottom of the dashboard
	SETL documentationWidget["x"]:0
	SETL documentationWidget["y"]:(y+2)
	SETL retParam:(aappend(tiles, documentationWidget))
}