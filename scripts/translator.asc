PROCEDURE global TRANSLATE_PIM_TO_PSM
{

    ### Procedure to generate the operation's PSM file from the original PIM
    ## 1. Select the original PIM inside the current model
    ## 2. Inside a Device>Component there therelated operation file --> if this does not exist throw an errorbox and stop the process
    ## 3. If this exists, open and select the operation file
    ## 4. Generate the PSM using the operation file as parameter (we only need to select a model)

    CC "Modeling" GET_ACT_MODEL
    SETL modelID:(modelid)
    #no model open
    IF (modelID = -1) {
        CC "AdoScript" INFOBOX ("Select a PIM model to proceed.")
        EXIT
    }

    TRANSLATE

     CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:"Device"    # return "objids", the list of the object ids 

    SET dev:(token(objids, 0, " ")) # memorized as STRING not as a number, get the first device in the model
    
    # check if we have at least one device
    IF (dev = "") {
        CC "AdoScript" ERRORBOX ("Can't genereate PSM's devices operations: There are no devices in this model")
        EXIT
    }
    
    # if this is a Feature Operation Model it's wrong to generate the PSM of the operations' file (you'll do twice the same instruction...)
    CC "Modeling" GET_ACT_MODEL
    CC "Core" GET_MODEL_MODELTYPE modelid:(modelid)
    IF (modeltype = "Feature Operation Model") {
        EXIT
    }
    # continue if the current model is not a "Feature Operation Model": if this is a Feature Model / IoT Scenario / IoT Logic it's fine 

    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:"Device"    # the list of the object ids 
    SET dev:(token(objids, 0, " "))      # memorized as STRING not as a number, get the first device in the model

    # redirect to the devices operations' file inside Device>Component
    CC "Core" GET_ATTR_VAL objid:(VAL dev) attrname:("Component")
    IF (ecode != 0) {
        CC "AdoScript" ERRORBOX ("The operation file of this model cannot be found")
    } ELSE {
        CC "Core" GET_INTERREF objid:(VAL dev) attrname:("Component") #extract the devices operations' model
        SETL mod:(tmodelid)
        CC "Modeling" OPEN modelids:(STR mod)   # select it to translate to PSM
        IF (ecode != 0) {
            CC "AdoScript" ERRORBOX("Devices operations model couldn't be loaded")
            EXIT
        }
        TRANSLATE
    }
}


### Procedure for transforming a PIM model to a PSM model
    ## 1. Create a new model
    ## 2. Get all model elements
    ## 3. Copy model elements
    ## 4. Paste elements in the new model
    ## 5. Open the new PSM model
    ## 6. Add PSM attributes
    ## 7. Save the new PSM model
PROCEDURE global TRANSLATE
{
    CC "Modeling" GET_ACT_MODEL
    SETL modelID:(modelid)
    IF (modelID = -1) { #no model open
        CC "AdoScript" INFOBOX ("Select a PIM model to proceed.")
        EXIT
    }
   
    ## 1.
    # Select a target model group
    CC "CoreUI" MODEL_SELECT_BOX without-models mgroup-sel title:"Select at least one target modelgroup"
    IF (endbutton != "ok") {
        EXIT
    }
    SETL a_mgroupids:(mgroupids)

    # Get actual model type
    CC "Core" GET_MODEL_MODELTYPE modelid:(modelID)
    SETL a_mt:(modeltype)
    SETL a_dstmodelid:0
    SETL ecode:1

    WHILE (ecode != 0) {
        # Let the user enter a new modelname
        CC "AdoScript" EDITFIELD title:("New model of " + a_mt) caption:"~Modelname:"
        IF (ecode != 0) {
            EXIT
        }
        SETL a_name:(text)
        CC "Core" CREATE_MODEL modeltype:(a_mt) modelname:(a_name) version:"" mgroups:(a_mgroupids)
        
        IF (ecode = 0) {
            SETL a_dstmodelid:(modelid)
        } ELSIF (ecode = 40) {
            CC "AdoScript" ERRORBOX ("A model with the same name already exists") ok
        } ELSE {
            CC "AdoScript" ERRORBOX ("An error occured creating the new model: " + STR errtext) ok
        }
    }
 
    ## 2.
    # Get all objects
    CC "Core" GET_ALL_OBJS modelid:(modelID)
    SETL a_instids:(objids)

    # Get all connectors
    CC "Core" GET_ALL_CONNECTORS modelid:(modelID)
    SETL a_relinstids:(objids)

    ## 3.
    # Copy all elements
    CC "Core" CREATE_COPYBUFFER index:0
    CC "Core" FILL_COPYBUFFER index:0 instids:(a_instids) relinstids:(a_relinstids)

    ## 4.
    # Paste elements in the new model
    CC "Core" PASTE_COPYBUFFER index:0 modelid:(a_dstmodelid)
    SETL g_acreatedinstids:(instids)
    SETL g_acreatedrelinstids:(relinstids)

    # Delete buffer
    CC "Core" DELETE_COPYBUFFER index:0

    ## 5.
    # Open new model in modeling
    CC "Modeling" OPEN modelids:(STR a_dstmodelid)
    CC "Modeling" SET_VIEW_MODE modelid:(a_dstmodelid) mode-name:"PSM"
    CC "Core" SET_ATTR_VAL objid:(a_dstmodelid) attrname:"Model Type" val:("PSM")
    CC "Core" SET_ATTR_VAL objid:(a_dstmodelid) attrname:"Platform" val:(platform)

    ## 6.
    # Get all objects from new model
    CC "Core" GET_ALL_OBJS modelid:(a_dstmodelid)
    IF (ecode != 0) {
        CC "AdoScript" ERRORBOX "Something went very wrong here (e.g. we passed the wrong model id)!\n"
        EXIT
    }

    ## 7.
    # Save and discard model
    CC "Core" SAVE_MODEL modelid:(a_dstmodelid)
    #CC "Core" DISCARD_MODEL modelid:(a_dstmodelid)
}


PROCEDURE global ADD_VALUE
objID:integer # The object id
{
    CC "Core" GET_CLASS_ID objid:(objID)
    CC "Core" GET_ATTR_VAL objid:(objID) attrname:("Service")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objID) attrid:(attrid)
    FOR r in:(rowids) {
        CC "Core" REMOVE_REC_ROW objid:(objID) attrid:(attrid) rowid:(VAL r)
    }
    IF ( val = "MQTT" ) {
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("Server Broker")
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("Topic")
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("QoS")
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("Port")
    }
    IF ( val = "HTTP" ) {
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("Address")
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("Port")
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("Method")
    }
}


PROCEDURE global TRANSLATE_PSM_TO_FILE
{
    # Get current model
    CC "Modeling" GET_ACT_MODEL
    SETL modelID:(modelid)
    IF (modelID = -1) { # No model open
        CC "AdoScript" INFOBOX ("Select a model to proceed.")
        EXIT
    }
    
    # Select the path to save files
    CC "AdoScript" DIRECTORY_DIALOG
    IF (endbutton != "ok") {
        EXIT
    }
    SETL filePath:(path + "\\features.json")

    #CC "AdoScript" INFOBOX (STR objs)
    #FOR id in:(mapKeysList(objs) ) sep:("~") {
    #   CC "Core" GET_INTERREF objid:(VAL id) attrname:("Component") index:0
    #  IF ( type(tmodelid) != "undefined" ) {
    # TAKE_FEATURE_MODEL model:(tmodelid) features:objs
    # }
    #}
    #CC "AdoScript" INFOBOX (STR objs)

    # Take all the model features
    SETL objs:(map())
    SETL features:({}) # SETL array named features
    CC "Modeling" GET_VIEW_MODE modelid:(modelID)
    TAKE_FEATURE_MODEL model:(modelID) features:objs
    FOR obj in:(mapKeysList(objs)) sep:("~") {
        SETL feature:(map())
        TAKE_COMPONENT obj:(obj) type:(modename) feature:feature            
        SETL n:(aappend(features, feature))
    }
    SETL features:(lam_toJson(features))
    CC "AdoScript" FWRITE file:(filePath) text:(features)
}

PROCEDURE global TAKE_COMPONENT
obj:string
type:string
feature:reference
{
    # Get all attributes of the selected class
    CC "Core" GET_CLASS_ID objid:(VAL obj)
    SETL objClass:(classid)
    CC "Core" GET_ALL_NB_ATTRS classid:(objClass)
    SETL allattrnames:({})
    FOR id in:(attrids) {
        CC "Core" GET_ATTR_NAME attrid:(VAL id)
        IF (type="PSM" OR attrname = "Name" OR attrname = "Description" OR attrname = "Selection" OR attrname = "Device type" OR attrname = "Component" OR attrname = "Operations" OR attrname = "Operation Name") {
            SETL n:(aappend(allattrnames, attrname))
        }
    }
    
    SETL feature:(map()) # SETL feature object
    FOR i from:0 to:(allattrnames.length-1) { # Take all the names
        SETL attr:(allattrnames[i])
        
        IF ( attr = "specification" ) {
            SETL specs:(map())
            CC "Core" GET_ATTR_ID classid:(objClass) attrname:("specification")
            CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(VAL obj) attrid:(attrid)

            # Get specification attributes
            FOR row in:(rowids) {
                CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Attribute")
                SETL key:(val)
                CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Value")
                SETL specs[key]:(val)
            }
            SETL feature["specification"]:(specs)
        } ELSIF ( attr = "Component" ) {
            CC "Core" GET_INTERREF objid:(VAL obj) attrname:("Component") index:0
            IF ( type(tmodelid) != "undefined" ) {
                SETL operations:(map())
                CC "Core" LOAD_MODEL modelid:(tmodelid)
                CC "Core" GET_INTERREF objid:(VAL obj) attrname:("Component") index:0
                CC "Core" GET_CONNECTORS objid:(tobjid) out
                FOR connectorId in:(objids) sep:(" ") {
                    SETL operation:(map())
                    CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connectorId)
                    TAKE_COMPONENT obj:(STR toobjid) type:(type) feature:operation
                    SETL operations[STR toobjid]:(operation)
                }
                SETL feature["Operations"]:(operations)
            }
        } ELSIF ( attr != "Operations" ) {
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:(allattrnames[i]) # Take for each object the attribute value
            SETL feature[allattrnames[i]]:(val) # SETL the attribute value inside the object 
        }
    }
    
    CC "Core" GET_CLASS_NAME classid:(objClass)
    SETL feature["Type"]:(classname)
    SETL feature["ID"]:(obj)
}


PROCEDURE global TAKE_FEATURE_MODEL
model:integer
features:reference
{
    CC "Core" LOAD_MODEL modelid:(model)
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(model) classname:("Feature")
    FOR obj in:(objids) {
        SETL features[obj]:1
    }
}