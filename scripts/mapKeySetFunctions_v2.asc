#------------------------------------------------------------------------------
FUNCTION mapKeysArray:global map_value:map
# Determines all the keys used in the map and returns them in an array.
# This is probably the safest of all the functions because it properly
# distinguishes the keys, works with every type of key and also preserves the
# type.
# Example usage:
#   mapKeysArray(myMap)
#------------------------------------------------------------------------------
return:(
  set(arr_keyset, array(LEN map_value)),
  for(val_index, 0, (LEN map_value)-1, set(arr_keyset[val_index], map_value.key(val_index)), arr_keyset)
)

#------------------------------------------------------------------------------
FUNCTION mapKeysTypes:global map_value:map
# Determines the different types used by the keys in the map and returns them
# as a list.
# More specifically it returns a string containing the keys' types, which are
# separated by the " " character.
# Example usage:
#   mapKeysTypes(myMap)
#------------------------------------------------------------------------------
return:(
  set(str_keytypes, ""),
  for(val_index, 0, (LEN map_value)-1, set(str_keytypes, tokunion(str_keytypes, type(map_value.key(val_index)))), str_keytypes)
)

#------------------------------------------------------------------------------
FUNCTION mapKeysList:global map_value:map
# Determines all the keys used in the map and returns them in a list.
# More specifically it returns a string containing the keys, which are
# separated by the "~" character. As such the keys should not contain the "~"
# character, otherwise it will be split into different tokens in the list.
# The used keys in the map must be of type string, otherwise this function will
# result in an error. The function mapKeysTypes(...) can be used to check the
# types used by the keys or the function try(..., ...) can be used to catch the
# error and handle it.
# Example usage:
#   mapKeysList(myMap)
#------------------------------------------------------------------------------
return:(
  set(str_keyset, ""),
  for(val_index, 0, (LEN map_value)-1, set(str_keyset, tokcat(str_keyset, map_value.key(val_index), "~")), str_keyset)
)

#------------------------------------------------------------------------------
FUNCTION mapKeysTypedList:global map_value:map
# Determines all the keys used in the map and returns them in a list.
# More specifically it returns a string containing the keys, which are 
# separated by the "~" character.
# The values in the list are such that they reflect their type (e.g. strings 
# are put in quotation marks) so they can be transformed into the correct value
# (string or number) using eval(...). Note that using eval(...) in an INFOBOX
# seems to lead to an error (asleo-84).
# Example usage:
#   mapKeySetTypedList(myMap)
#------------------------------------------------------------------------------
return:(
  set(str_keyset, ""),
  for(val_index, 0, (LEN map_value)-1, (
    set(any_temp, map_value.key(val_index)),
    set(str_keytype, type(any_temp)),
    cond(str_keytype = "string", set(str_keyset, tokcat(str_keyset, "\"" + any_temp + "\"", "~")),
      set(str_keyset, tokcat(str_keyset, STR any_temp, "~")))
  ), str_keyset)
)


#------------------------------------------------------------------------------
# Below the code that has ben used to test the functions.
#------------------------------------------------------------------------------
IF (0) {
  SETL temp_map:({1:"hello", 3.4:"this is real", 2:"world", "test":"somevalue", 3.14159:"pie"})
  CC "AdoScript" INFOBOX ("Using map:\n" + STR temp_map)
  CC "AdoScript" INFOBOX (mapKeysArray(temp_map))
  CC "AdoScript" INFOBOX (mapKeysTypes(temp_map))

  SETL temp_str:(mapKeysTypedList(temp_map))
  CC "AdoScript" INFOBOX (temp_str)
  FOR str_token in:(temp_str) sep:"~" {
    SETL temp_any:(eval(str_token))
    CC "AdoScript" INFOBOX (temp_any)
    CC "AdoScript" INFOBOX (type(temp_any))
  }

  SETL temp_map:({"1":"hello", "3.4":"this is real", "2":"world", "test":"somevalue", "3.14159":"pie"})
  CC "AdoScript" INFOBOX ("Using map:\n" + STR temp_map)
  CC "AdoScript" INFOBOX (mapKeysList(temp_map))
}
#------------------------------------------------------------------------------