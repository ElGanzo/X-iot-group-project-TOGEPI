# 
#       !!!!!!!!!!!!! READ CAREFULLY !!!!!!!!!!!!!
#
#       - This json is used by the User to implement a Device Template (the device's functionality, capability)
#
#       - In Azure:
#           - each Device can be assigned to a single Device Template or neither one (but max one!)
#           - each Device Template can be associated to many Devices
#           - the Device's srmation and properties are loaded by a .csv file
#           - the Device's functionalities are loaded by the .json file producted by this script
#
#       - In IoTScenario:
#           - we can produce as many json files as the number of devices in this model (each device has his own functionalities)
#           - TODO where are the devices functionalities described (elaborate and deduct the information in the final PSM model) ?
#        
#       - the User:
#           - is asked about the Application URL in Azure (only the central part, as is in Azure) ex: www.myapp.iotcentralhome.com ---> myapp
#           - is asked about the Name of the Device Template, the one (with the same name!) that will be created in Azure>Device Templates,
#               here we will need to know which device we want to retrieve attributes(functionalities, so operations and events too!) 
#
#
# Azure json file for device capabilities format from an IoTScenario PSM :
# [
#   {
#       - is only inserted one OBJECT which includes
#       @DeviceTemplateId     -id ATTRIBUTE of the main object
#       @Type                 -type ATTRIBUTE "     "     "
#       contents[             -capabilities ARRAY containing CAPABILITY objects
#           {
#               capabilityObject1           -capability OBJECT
#           },
#           {
#               capabilityObject2
#           },
#           ...
#       ],
#       "displayName": {                    -displayName OBJECT (TODO maybe it's the DeviceName)
#           "en": "GenzingDevice2"          -attribute
#       },
#       "@context": [                       -default ARRAY containings 2 attribute
#           "dtmi:iotcentral:context;2",
#           "dtmi:dtdl:context;2"
#       ]
#   }
# ]

DEPLOY_FOR_AZURE #TODO poi aggiustare l'add-ons e accomedare qua

PROCEDURE global DEPLOY_FOR_AZURE {

	CC "Modeling" GET_ACT_MODEL

	# no control on the model needed, menu item "PSM to code > Deploy > Azure" ensure that we are in an IoT Scenario PSM model 
    
	SETL modelID:(modelid)

    # Select the path to save files
    CC "AdoScript" DIRECTORY_DIALOG
    IF (endbutton != "ok") {
        EXIT
    }

    # The json file starts with the [] so we need to write first an array of objects (in this case, with only one "primary"-object)
    SET container:({})
    # primaryObject: the only global object inserted into the json file, the only element of the "container" array 
    SET primaryObject:(map())

    # Application name and device template name are used for the id buildings
    SET applicationURL: ""
#    SET deviceTemplateName: ""

    # Take all the model devices
    GET_APP_NAMES applicationURL:applicationURL #deviceTemplateName:deviceTemplateName

    SET contents:({})   # array "contents" with many "capability" objects as the number of the device capabilities'
    #sSET devices:({})

    CC "Modeling" GET_VIEW_MODE modelid:(modelID)
    #TAKE_IOT_SCENARIO_MODEL model:(modelID) devices:devices
    CC "Core" LOAD_MODEL modelid:(modelID)

    # for each device return a json file with the device's functionalities
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("device") # TODO final instructions should be placed before the FOR cycle ends, if we need a file for each device
    FOR obj in:(objids) {

        SET primaryObject["@id"]:("dtmi:"+applicationURL+":"+deviceTemplateName+"_"+"123"+";"+"1")
        SET primaryObject["@type"]:"Interface"

        SETL device:(map())
        TAKE_DEVICE obj:(obj) type:(modename) device:device #forse type:(modename) è inutile
        SETL n:(aappend(contents, device))
        SET primaryObject["contents"]:(contents)

        SET finalName:(map())
        SET finalName["en"]:(deviceTemplateName)
        SET primaryObject["displayName"]:(finalName)

        SET context:({"dtmi:iotcentral:context;2","dtmi:dtdl:context;2"}) # TODO 2 o 1 a seconda di cosa, boh
        SET primaryObject["@context"]:(context)

        #  final instructions
        SET container:({primaryObject})
        SETL primaryObject:(lam_toJson(container))
        CC "AdoScript" FWRITE file:(filePath) text:(primaryObject)
    }
    #FOR objid in:(tokcnt (devices, ",")) {
     #   SETL device:(map())
      #  TAKE_COMPONENT obj:(objid) type:(modename) device:device
       # SETL n:(aappend(contents, device))
    #}
    
}

PROCEDURE global GET_APP_NAMES
applicationURL:reference
#deviceTemplateName:reference
{
    CC "AdoScript" EDITFIELD title:"Azure's Application URL" caption:"Enter Azure's Application URL (only the part in between, as in Azure):" text:"myazureapplication"
    IF (ecode != 0) {# if "ok" button is not clicked, something went wrong
        EXIT
    }
    SET applicationURL:(text)
    # TODO molto probabilmente inutile, se ogni device produce un json, il Device Template su Azure si chiamerà semplicemente col nome del device
    #CC "AdoScript" EDITFIELD title:"Azure's device template name" caption:"Enter new Azure's device template name:" text:"MyNewAzureDeviceTemplate"
    #IF (ecode != 0) { 
    #    EXIT
    #}
    #SET deviceTemplateName:(text)
}

# each Device has its own capabilities
PROCEDURE global TAKE_DEVICE
obj:string
type:string
device:reference
{
    # !!!!!!!!!!!! TODO !!!!!!!
    # take every capability --> inside Event or Operations or both??

    # Get all attributes of the selected class (device) TODO it should take also the Attributes, Services ecc...
    CC "Core" GET_CLASS_ID objid:(VAL obj)
    SETL objClass:(classid)
    # Get all the notebook's attributes
    CC "Core" GET_ALL_NB_ATTRS classid:(objClass)

    # but we cache only the usefull data
    SET allattrnames:({})
    SETL capabilityName: ""
    SETL capabilityDescription: ""
    SETL capabilityType: ""
    #SETL capabilityStructure: ""
    FOR id in:(attrids) {
        CC "Core" GET_ATTR_NAME attrid:(VAL id)
        # if this attribute is what we need, take it, TODO analyze it better
        CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:(attrname)
        IF (attrname = "name") {
            SET n:(aappend(allattrnames, val))
            SETL capabilityName: (val)
        } ELSIF (attrname = "description") {
            SET n:(aappend(allattrnames, val))
            SETL capabilityDescription: (val)
        } ELSIF (attrname = "type") {
            SET n:(aappend(allattrnames, val))
            SETL capabilityType: (val)
        }# ELSIF (attrname = "structure") {
          #  SET n:(aappend(allattrnames, val))
           # SETL capabilityStructure: (val)
        #}  ELSIF (attrname = "specification") { TODO specification da chiedere ad Arianna, probabilmente è un attributo molto importante a quanto tarek
            #SET n:(aappend(allattrnames, attrname))
    }

    # global parameters got by "Attribute" classes <SemanticType> -> Telemetry, Cloud Propery, Property or Command (let's translate)
    SETL device:(map())
    SETL device["@id"]:("dtmi:"+applicationURL+":"+deviceTemplateName+"_"+"123"+":"+capabilityName+";"+"1")
    SETL type:({"Telemetry", "NumberValue"})
    SETL device["@type"]:(type)
    SETL displayName:(map())
    SETL displayName["en"]:(capabilityName)
    SETL device["displayName"]:(displayName)
    SETL device["name"]:(capabilityName)
    SETL device["schema"]:("double") # double di default
 
    FOR i from:0 to:(allattrnames.length-1) {
        SETL attr:(allattrnames[i])
        IF ( attr = "specification") {
            SETL specs:(map())
            CC "Core" GET_ATTR_ID classid:(objClass) attrname:("specification")
            CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(VAL obj) attrid:(attrid) 
            # Get specification attributes
            FOR row in:(rowids) {
                CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Attribute")
                SETL key:(val)
                CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Value")
                SETL specs[key]:(val)
            }
            SETL device["specification"]:(specs) # TODO accomedare
        }
    }

    SET filePath:(path + "\\"+deviceTemplateName+"_capabilities.json")
}


# devices and their "Attribute" classes are all we need. (maybe some other attributes like Location ecc...)
#PROCEDURE global TAKE_IOT_SCENARIO_MODEL
#model:integer
#devices:reference
#{
#    CC "Core" LOAD_MODEL modelid:(model)
#    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(model) classname:("device")
#    FOR obj in:(objids) {
        #SETL n:(aappend(devices, obj))
#    }
#}