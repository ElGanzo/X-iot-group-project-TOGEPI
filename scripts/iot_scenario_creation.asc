#this script generates two XIoT Scenario PIM views starting from a Feature Model PSM (with its Feature Operation Model PSM)
#"first view" is the model containing a view of the systems and devices in the Feature model.
#"second view" refers to the model containing devices with their operations/events and all their attributes

#a chi ha aperto questo script per modificare o altro: scusa è un macello mi dispiace
# index:
# 1 - MENU - EMPTY MODEL CREATION
# 2 - MAIN PROCEDURE - XIOT SCENARIO CREATION
# 3 - PIM VIEW CREATION
# 4 - DETAILED DEVICE VIEW CREATION
# 5 - IOT LOGIC CREATION
# 0 - MISC

#COMMENT OUT THE FOLLOWING LINE TO CALL THE SCRIPT FROM EXT COUPLING AS PROCEDURE INSTEAD OF DOING "EXECUTE file:()"
# GENERATE_SCENARIO

# -------------------------- MENU - EMPTY MODEL CREATION -------------------------- #


PROCEDURE global GENERATE_SCENARIO {
    CC "Modeling" GET_ACT_MODEL
    SETG a_srcmodelid:(modelid)     #feature model
    SETG a_opssrcmodelid:0          #feature device view (operations)
    SETG a_dstmodelid:0             #xiot scenario pim
    SETG a_opsdstmodelid:0          #xiot scenario pim - device view
    CC "Modeling" GET_VIEW_MODE
    SETL selection:"amogus"
    SETL endbutton:"ok"
    SETG modenamepsm:0
    IF (modename = "PSM") {
        CC "AdoScript" MLISTBOX entries:"ThingsBoard;Losant;Azure"
            toksep:";"
            title:"Select platform"
            oktext:"Generate"
            boxtext:"Select your desired platform"
            # extra:{ CHECKBOX "Generate IoT Logic" result-var:checked }    #genera anche IoT Logic
        # checked is 1 if checked
        SET modenamepsm:1
    } 
    #ELSE {}
    IF (endbutton != "ok") {
        EXIT
    }
    CREATE_NEW_XIOT_SCENARIOS    #crea le due viste xiot PIM + la vista della logica
    # IF (checked = 1) { GENERATE_LOGIC }

    #crea PSM della piattaforma selezionata
    #mettere CC "AdoScript" PERCWIN per mostrare caricamento
    IF (selection = "Azure") {
        CC "Modeling" OPEN modelids:(a_dstmodelid)
        PRESET_PSM platform:("Azure")
    } ELSIF (selection = "ThingsBoard") {
        CC "Modeling" OPEN modelids:(a_dstmodelid)
        PRESET_PSM platform:("ThingsBoard")
    } ELSIF (selection = "Losant") {
        CC "Modeling" OPEN modelids:(a_dstmodelid)
        PRESET_PSM platform:("Losant")
    }
    EXIT
}

PROCEDURE global CREATE_NEW_XIOT_SCENARIOS {
    CC "CoreUI" MODEL_SELECT_BOX without-models mgroup-sel title:"Select a target modelgroup"
    IF (endbutton != "ok") {
        EXIT
    }
    CC "Core" GET_MODEL_BASENAME modelid:(modelid)
    # SETL ecode:1
    # WHILE (ecode != 0) {
        CC "AdoScript" EDITFIELD title:("Insert new model name..." + basename) caption:("~Modelname:")
        IF (ecode != 0) {
            EXIT
        }
        CC "Core" CREATE_MODEL modeltype:("IoT Scenario") modelname:(text) version:"" mgroups:(mgroupids)
        IF (ecode = 0) {
            SET a_dstmodelid:(modelid)
        } ELSIF (ecode = 40) {
            CC "AdoScript" ERRORBOX ("A model with the same name already exists!") ok
            EXIT
        } ELSE {
            CC "AdoScript" ERRORBOX ("An error occured creating the new model: " + STR errtext) ok
            EXIT
        }
        #sarebbe meglio creare dopo, perché se non ci sono operazioni rimane bianco
        CC "Core" CREATE_MODEL modeltype:("IoT Scenario") modelname:(text + " - Device View") version:"" mgroups:(mgroupids)
        SET a_opsdstmodelid:(modelid)
        #set view mode pim?
        GENERATE_ELEMENTS
        # magari fare che la vista delle operazioni viene generata solo se effettivamente c'è
        # (tipo se non c'è interref a operation view -> fai solo xiot scenario vista di base)
        # bisognerebbe fare get_all_objs devices e vedere se hanno interref.
    # }
    GENERATE_LOGIC srcmodelname:(text) srcmodelid:(a_opsdstmodelid)
}

# -------------------------- MAIN PROCEDURE - XIOT SCENARIO CREATION -------------------------- #


PROCEDURE global GENERATE_ELEMENTS {
    #copia tutti oggetti classe Feature (Feature model)
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(a_srcmodelid) classname:"Feature"
    SETL allobjs:(objids)
    LOAD_FEATURE_FEATURES featureobjs:(allobjs) featureobjsmap:objsmap
    # CC "AdoScript" INFOBOX (objsmap)
    CREATE_SELECTED_OBJECTS featureobjs:(objsmap) featureobjsmap:objsmap
    # CC "AdoScript" INFOBOX (objsmap)
    CREA_CONNETTORI featureobjs:(objsmap) ecode:ecode
    POSIZIONA_SAME_POS featureobjs:(objsmap) ecode:ecode

    #crea vista dettagliata dei dispositivi
    GENERATE_DEVICE_SECOND_VIEW featureobjs:(objsmap) ecode:ecode 
}


# -------------------------- PIM VIEW CREATION -------------------------- #


PROCEDURE global LOAD_FEATURE_FEATURES featureobjs:string featureobjsmap:reference {
    #maybe there was a way to use allattrnames to get all attributes names and then all values
    SET featureobjsmap:(map())
    FOR featureid in:(featureobjs) {
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Selection")
        # IF (val != "Selected") {
        IF (val = "No Selected" AND modenamepsm = 1) {
            NEXT
        }
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Name")
        SETL name:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Description")
        SETL description:(val)
        # CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("type")  #solo per device
        # SETL devicetype:(val)
        CC "Core" GET_CLASS_ID objid:(VAL featureid)
        CC "Core" GET_CLASS_NAME classid:(classid)
        SETL type:(classname)
        CC "Core" GET_ATTR_ID classid:(classid) attrname:"Position"
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrid:(attrid)
        LEO parse:(val) get-tmm-value:x:"x" get-tmm-value:y:"y"
        SETL featureobjsmap[featureid]:({
            "Name": name,
            "Description": description,
            "Class": type,
            # "Device Type": devicetype,
            "X": x,
            "Y": y
        })
    }
}

PROCEDURE global CREATE_SELECTED_OBJECTS featureobjs:map featureobjsmap:reference {
#questa funzione crea solamente gli oggetti, senza posizionarli o collegarli.
    SETG x:(2cm)
    SETG y:(2cm)
    CC "Modeling" OPEN modelids:(a_dstmodelid)
    SET ecode:0
    SETL currclass:"none"
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {
        SETL featureobj:(featureobjs[featureid])
        SETL featobjid:(featureid)
        GET_CORRECT_XIOT_CLASSID featobjid:(VAL featobjid) xiotclassid:xiotclassid
        CC "Core" CREATE_OBJ modelid:(a_dstmodelid) classid:(xiotclassid)   #crea oggetto prima view
        SETL newobjid:(objid)
        CC "Core" SET_ATTR_VAL objid:(newobjid) attrname:"name" val:(featureobj["Name"])
        CC "Core" SET_ATTR_VAL objid:(newobjid) attrname:"description" val:(featureobj["Description"])
        # CC "Core" SET_ATTR_VAL objid:(objid) attrname:"type" val:(featureobj["Device Type"])
        SETL currclass:(featureobj["Class"])
        SETL devviewid:0
        IF (currclass = "Device") {
            CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(xiotclassid)    #creo anche su seconda view
            SETL devviewid:(objid)   #id device nella seconda view
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"name" val:(featureobj["Name"])
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"description" val:(featureobj["Description"])
            CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("type")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"type" val:(val)
            CC "Core" SET_ATTR_VAL objid:(newobjid) attrname:"type" val:(val)
            #location attribute
            CC "Core" GET_CLASS_ID classname:("location")
            CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(classid)
            SETL locationid:(objid)
            CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Coverage")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"coverage" val:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("GeoPoints")
            IF (val != "") {
                SETL lat:(token(val, 0, ";"))
                SETL lon:(token(val, 1, ";"))
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:"lat" val:(lat)
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:"lon" val:(lon)
            }
            CC "Core" GET_CLASS_ID relation classname:"hasLocation"
            CC "Core" CREATE_CONNECTOR modelid:(a_opsdstmodelid) fromobjid:(devviewid) toobjid:(locationid) classid:(classid)
            CC "Core" GET_CLASS_ID classname:"device"
            CC "Core" GET_ATTR_ID classid:(classid) attrname:"structure"
            CC "Core" ADD_INTERREF objid:(newobjid) attrid:(attrid) tobjid:(devviewid)
            CC "Core" ADD_INTERREF objid:(devviewid) attrid:(attrid) tobjid:(newobjid)
        }

        CC "Core" GET_CONNECTORS objid:(VAL featureid) in       #prendo connettori entranti in current featureobj
        SETL parentid:0
        FOR connid in:(objids) {
            CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
            CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:("Selection")
            IF (val = "Selected" OR modenamepsm = 0) {
                SET parentid:(fromobjid)
            }
        }
        SETL x:(featureobj["X"])
        SETL y:(featureobj["Y"])
        SETL featureobjs[featureid]:({
            "NewId": newobjid,  #integer
            "Class": currclass,
            "Parent": parentid,
            "DevViewId": devviewid, #ID DELLA VIEW DEI DEVICES
            "X": x,
            "Y": y
        })
    }
    SET featureobjsmap:(featureobjs)    # reference della procedure
}

PROCEDURE global CREA_CONNETTORI featureobjs:map ecode:reference {
    # CC "AdoScript" INFOBOX (featureobjs)
    SET ecode:0
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {
        SETL featureobj:(featureobjs[featureid])
        IF (featureobj["Parent"] = 0) {
            NEXT    #nessun connettore da creare
        }
        IF (featureobj["Class"] = "System") {
            CC "Core" GET_CLASS_ID relation classname:"subsystem"
            SETL relclassid:(classid)
        } ELSIF (featureobj["Class"] = "Device") {
            CC "Core" GET_CLASS_ID relation classname:"hasDevice"
            SETL relclassid:(classid)
        } ELSE {
            NEXT
        }
        SETL parentid:(STR featureobj["Parent"])
        # SETL xiotparent:(featureobjs[parentid]) # PERCHE PARENTID è VAL DIOCANE
        SETL xiotparentid:(featureobjs[parentid]["NewId"]) 
        SETL xiotobjid:(featureobj["NewId"])
        CC "Core" CREATE_CONNECTOR modelid:(a_dstmodelid) fromobjid:(xiotparentid) toobjid:(xiotobjid) classid:(relclassid)
    }
}


# -------------------------- DETAILED DEVICE VIEW CREATION -------------------------- #


PROCEDURE global GENERATE_DEVICE_SECOND_VIEW featureobjs:map ecode:reference {
#a questo punto i device stanno già dentro la seconda view! bisogna aggiungere operazioni/eventi
#metto solo i device e operazioni/eventi con i loro attributi nella mappa
    # CC "AdoScript" INFOBOX (featureobjs)
    SETL actuallyhasops:0
    SETL devicesmap:(map())
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {     #creo mappa, ci metto solo i device
        SETL currobj:(featureobjs[featureid])
        IF (currobj["Class"] != "Device") {
            NEXT
        }
        SETL newdevid:(currobj["DevViewId"])
        #"NewId" e "DevViewId" sono gli id della prima view e seconda view xiot
        SETL devicesmap[featureid]:({   #id nel feature model psm sorgente
            "NewId": newdevid,          #id nella seconda view xiot (operazioni)
            "Operations": {}
        })
        SETL operations:({})
        SETL device:(devicesmap[featureid])
        #get objid of device in feature psm ops
        CC "Core" GET_CLASS_ID classname:("Device")
        CC "Core" GET_INTERREF objid:(VAL featureid) attrname:("Component")
        SETL olddevobjid:(tobjid)
        CC "Core" GET_CONNECTORS objid:(olddevobjid) out
        # got operations attached to the device

        #TODO rivedere: forse posso creare gli oggetti direttamente da dentro questo ciclo for
        # ..ovvero senza questa mappa devicesmap in mezzo
        FOR connid in:(objids) {        #per ogni operazione collegata al device
            SETL operation:(map())
            CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Selection")
            # IF (val != "Selected") {
            IF (val = "No Selected" AND modenamepsm = 1) {
                NEXT #skip iteration
            } ELSE {
                IF (actuallyhasops = 0) {
                    SET actuallyhasops:1
                }
            }
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Operation Name")
            SETL operation["Name"]:(val)
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Description")
            SETL operation["Description"]:(val)
            # CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Required")
            # SETL operation["Required"]:(val)
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Type")
            SETL operation["Type"]:(val)
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Data Type")
            SETL operation["Data Type"]:(val)
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Service")
            SETL operation["Service"]:(val)
            
            # SETL specs:({})
            SETL specs:(map())
            CC "Core" GET_CLASS_ID classname:"Operation"
            CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
            IF (val = "MQTT" OR val = "HTTP") {
                CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(toobjid) attrid:(attrid)
                IF (ecode = 0) {
                IF (rowids != "") {
                FOR rowid in:(rowids) {
                    CC "Core" GET_ATTR_VAL objid:(VAL rowid) attrname:("Attribute")
                    SETL speckey:(val)
                    CC "Core" GET_ATTR_VAL objid:(VAL rowid) attrname:("Value")
                    SETL specval:(val)
                    SETL specs[rowid]:({    #essendo mappa posso fare specs[rowid?]
                        "Key": speckey,
                        "Val": specval
                    })
                    }
                }
                }
                # SET counter:(counter + 1)
            }  #TODO: ELSE prendere comunque?

            SETL operation["Specification"]:(specs)
            #SPECS è VUOTO PER QUALCHE MOTIVO
            # CC "AdoScript" INFOBOX (STR operation + " specs: " + STR specs)
            SETL n:(aappend(operations, operation))
            # }   #if not selected
        }
        SETL device["Operations"]:(operations)
        SETL devicesmap[featureid]:(device)
    }
    IF (actuallyhasops = 0) {
        CC "Core" DELETE_MODEL modelid:(a_opsdstmodelid)
        EXIT
    }
    # CC "AdoScript" INFOBOX (devicesmap)
    #nuovi id (xiot scenario ops) stanno in devids. i device con le ops stanno in devicesmap.

    # GENERATE_DEVICES_OPERATIONS (da qui in poi) #(chiamare funzione separata?)

    FOR deviceid in:(mapKeysList(devicesmap)) sep:("~") {
        SETL device:(devicesmap[deviceid])
        SETL operations:(device["Operations"])
        SETL nops:(operations.length)
        FOR i from:0 to:(nops-1) {
            SETL name:(operations[i]["Name"])
            SETL rand:(name + STR randomDiscreteUniformDist(10000, 99999))
            SETL description:(operations[i]["Description"])
            # SETL required:(operations[i]["Required"])
            SETL type:(operations[i]["Type"])
            SETL service:(operations[i]["Service"])
            SETL datatype:(operations[i]["Data Type"])
            SETL specs:(operations[i]["Specification"])
            IF (type = "Event") {
                CC "Core" GET_CLASS_ID classname:("Event")
                SETL rightclassid:(classid)
                CC "Core" GET_CLASS_ID relation classname:("hasEvent")
                SETL rightrelclassid:(classid)
                CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(rightclassid) objname:(rand)
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:("Event Name") val:(name)
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(description)
            } ELSE {
                CC "Core" GET_CLASS_ID classname:("Device Operation")
                SETL rightclassid:(classid)
                CC "Core" GET_CLASS_ID relation classname:("hasOperation")
                SETL rightrelclassid:(classid)
                CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(rightclassid) objname:(rand)
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:("Operation Name") val:(name)
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(description)
            }
            SETL newobjid:(objid)
            CC "Core" CREATE_CONNECTOR modelid:(a_opsdstmodelid) fromobjid:(device["NewId"]) toobjid:(newobjid) classid:(rightrelclassid)

            CC "Core" GET_CLASS_ID classname:"service"
            CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(classid)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("protocol") val:(service)
            CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
            FOR rowid in:(mapKeysList(specs)) sep:("~") {
                SETL currrow:(specs[rowid])
                CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
                SETL key:(currrow["Key"])
                CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Attribute") val:(key)
                SETL val:(currrow["Val"])
                CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(val)
            }
            CC "Core" GET_CLASS_ID relation classname:"hasService"
            CC "Core" CREATE_CONNECTOR modelid:(a_opsdstmodelid) fromobjid:(newobjid) toobjid:(objid) classid:(classid)

            CC "Core" GET_CLASS_ID classname:"attribute"
            CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(classid)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("type") val:(datatype)
            CC "Core" GET_CLASS_ID relation classname:"hasAttribute"
            CC "Core" CREATE_CONNECTOR modelid:(a_opsdstmodelid) fromobjid:(newobjid) toobjid:(objid) classid:(classid)
        }
    }
    #se non ci sono operazioni ed eventi, deleta il modello delle operazioni (inutile)
    POSIZIONA_DEVICES
}


# -------------------------- IOT LOGIC CREATION -------------------------- #


PROCEDURE global GENERATE_LOGIC srcmodelname:string srcmodelid:integer {
    CC "CoreUI" MODEL_SELECT_BOX without-models mgroup-sel title:"Select a modelgroup for the Logic model"
    IF (endbutton != "ok") {
        EXIT
    }
    
    # prendi tutti gli oggetti service
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(srcmodelid) classname:"service"
    SETL serviceids:(objids)
    # CC "AdoScript" INFOBOX (srcmodelname + " id: " + STR srcmodelid + " serviceids: " + serviceids)

    IF (serviceids = "") {
        EXIT
    }
    CC "Core" CREATE_MODEL modeltype:("IoT Logic") modelname:(srcmodelname + " - Logic") version:"" mgroups:(mgroupids)
    SETL a_logicmodelid:(modelid)

    CC "Core" GET_CLASS_ID classname:"data_stream_in"
    SETL datainid:(classid)
    CC "Core" GET_CLASS_ID classname:"data_stream_out"
    SETL dataoutid:(classid)
    CC "Core" GET_CLASS_ID classname:"service"
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Logic"
    SETL servicerefattrid:(attrid)
    CC "Core" GET_ATTR_ID classid:(datainid) attrname:"service"
    SETL datainrefattrid:(attrid)
    CC "Core" GET_ATTR_ID classid:(dataoutid) attrname:"service"
    SETL dataoutrefattrid:(attrid)
    #todo non crea oggetti che hanno stesso nome
    FOR serviceid in:(serviceids) {
        #get connector (there's supposed to be only one connector)
        CC "Core" GET_CONNECTORS objid:(VAL serviceid) in
        # CC "AdoScript" INFOBOX (objids)
        SETL connid:(token(objids, 0, " "))
        
        # get operation (to get name)
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
        CC "Core" GET_CLASS_ID objid:(fromobjid)
        CC "Core" GET_CLASS_NAME classid:(classid)
        IF (classname = "Device Operation") {
            CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"Operation Name"
        } ELSIF (classname = "Event") {
            CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"Event Name"
        } ELSE {
            CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"name"
        }
        #che se no manco crea li oggetti perche cia lo stesso nome diocane
        IF (ecode != 0) {
            CC "Core" ECODE_TO_ERRTEXT ecode:(ecode)
            CC "Core" INFOBOX (errtext + " connector ids: " + objids)
            NEXT
        }
        SETL datastreaminname:(val + " - data stream in")
        SETL datastreamoutname:(val + " - data stream out")
        
        # get device (to get type)
        CC "Core" GET_CONNECTORS objid:(fromobjid) in
        SETL connid:(token(objids, 0, " "))
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
        CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"type"
        # CC "AdoScript" INFOBOX ("trovato " + val)
        IF (val = "sensor" OR val = "tag") {
            #crea solo data stream in (e metti interref)
            CC "Core" CREATE_OBJ modelid:(a_logicmodelid) classid:(datainid) objname:(datastreaminname)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"name" val:(datastreaminname)
            #aggiungi interref a entrambi gli oggetti (service <-> DSI)
            CC "Core" ADD_INTERREF objid:(VAL serviceid) attrid:(servicerefattrid) tobjid:(objid)
            CC "Core" ADD_INTERREF objid:(objid) attrid:(datainrefattrid) tobjid:(VAL serviceid)
        } ELSIF (val = "actuator" OR val = "gateway") {
            #crea data stream in
            CC "Core" CREATE_OBJ modelid:(a_logicmodelid) classid:(datainid) objname:(datastreaminname)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"name" val:(datastreaminname)
            #aggiungi interref a entrambi gli oggetti (service <-> DSI)
            CC "Core" ADD_INTERREF objid:(VAL serviceid) attrid:(servicerefattrid) tobjid:(objid)
            CC "Core" ADD_INTERREF objid:(objid) attrid:(datainrefattrid) tobjid:(VAL serviceid)
            SETL uno:(objid)
            #crea anche data stream out
            CC "Core" CREATE_OBJ modelid:(a_logicmodelid) classid:(dataoutid) objname:(datastreamoutname)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"name" val:(datastreamoutname)
            #aggiungi interref a entrambi gli oggetti (service <-> DSO)
            CC "Core" ADD_INTERREF objid:(VAL serviceid) attrid:(servicerefattrid) tobjid:(objid)
            CC "Core" ADD_INTERREF objid:(objid) attrid:(dataoutrefattrid) tobjid:(VAL serviceid)
            SETL due:(objid)
            #crea connettore datastreamin e datastreamout
            CC "Core" GET_CLASS_ID relation classname:"contains"
            CC "Core" CREATE_CONNECTOR modelid:(a_logicmodelid) fromobjid:(uno) toobjid:(due) classid:(classid)
        } ELSE {
            CC "AdoScript" ERRORBOX ("Fatal error, couldnt get device type")
        }
    }
    CC "Modeling" OPEN modelids:(a_logicmodelid)
    POSIZIONA_GENERICS
}

# -------------------------- MISC -------------------------- #


PROCEDURE global GET_CORRECT_XIOT_CLASSID featobjid:integer xiotclassid:reference {
    CC "Core" GET_CLASS_ID objid:(featobjid)
    CC "Core" GET_CLASS_NAME classid:(classid)
    SETL featclassname:(classname)
    IF (featclassname = "Feature" OR featclassname = "System") {
        CC "Core" GET_CLASS_ID classname:("system")
    } ELSIF (featclassname = "Device") {
        CC "Core" GET_CLASS_ID classname:("device")
    } ELSIF (featclassname = "Operation") {
        CC "Core" GET_ATTR_VAL objid:(featobjid) attrname:("Class")
        IF (val = "Event") {
            CC "Core" GET_CLASS_ID classname:("Event")
        } ELSIF (val = "Operation") {
            CC "Core" GET_CLASS_ID classname:("Device Operation")
        }
    }
    SET xiotclassid:(classid)
}

PROCEDURE global POSIZIONA_SAME_POS featureobjs:map ecode:reference {
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {
        SETL currobj:(featureobjs[featureid])
        CC "Modeling" SET_OBJ_POS objid:(currobj["NewId"]) 
            x:(currobj["X"]) y:(currobj["Y"])
    }
}

PROCEDURE global POSIZIONA_DEVICES {
    CC "Modeling" OPEN modelids:(a_opsdstmodelid)
    SETG x:(2cm)
    SETG y:(2cm)
    # CC "Core" GET_ALL_CLASSES_OF_MODE modeltype:("IoT Scenario") modename:("PIM") # l'ordine non mi va bene
    SETL classids:("72132 72237 72297 72294 72191 72229 72204")
    #classids di device, location, event, device op, service, attribute, widget
    FOR classid in:(classids) {
        CC "Core" GET_CLASS_NAME classid:(VAL classid)
        IF (isrel != 0) {
            NEXT
        }
        POSIZIONA_OGGETTI_SECVIEW classname:(classname) ecode:ecode
    }
}

PROCEDURE global POSIZIONA_OGGETTI_SECVIEW classname:string ecode:reference {
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(a_opsdstmodelid) classname:(classname)
    FOR objid in:(objids) {
        CC "Modeling" SET_OBJ_POS objid:(VAL objid) x:(x) y:(y)
        NEXT_POSITION_XIOT
    }
    NEW_ELEMENT_LINE
}

PROCEDURE global POSIZIONA_GENERICS {
    CC "Modeling" GET_ACT_MODEL
    SETG x:(2cm)
    SETG y:(2cm)
    CC "Core" GET_ALL_CLASSES_OF_MODE modeltype:("IoT Logic") modename:("PIM")
    FOR classid in:(classids) {
        CC "Core" GET_CLASS_NAME classid:(VAL classid)
        IF (isrel != 0) {
            NEXT
        }
        # POSIZIONA_OGGETTI_SECVIEW classname:(classname) ecode:ecode
        CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:(classname)
        IF (ecode != 0 OR objids = "") {
            NEXT
        }
        FOR objid in:(objids) {
            CC "Modeling" SET_OBJ_POS objid:(VAL objid) x:(x) y:(y)
            NEXT_DEV_POSITION
        }
        NEW_ELEMENT_LINE
    }
}

PROCEDURE global NEW_ELEMENT_LINE {
    #todo extra: da fare solo se x e y sono entrambi diversi da posizione iniziale
    SET x:2cm
    SET y:(y + 4cm)
}

PROCEDURE global NEXT_DEV_POSITION {
    #-----> RESULT x:measure y:measure
    IF (x > 15cm) {
        SET x:4cm
        SET y:(y + 3cm)
    } ELSE {
        SET x:(x + 5cm)
    }
    CC "Modeling" SAVE modelid:(a_dstmodelid)
}

PROCEDURE global NEXT_POSITION_XIOT {
    #-----> RESULT x:measure y:measure
    IF (x > 15cm) {
        SET x:2cm
        SET y:(y + 2cm)
    } ELSE {
        SET x:(x + 3cm)
    }
    CC "Modeling" SAVE modelid:(a_dstmodelid)
}