#this script generates two XIoT Scenario PSM views starting from a Feature Model PSM with its Feature Operation Model PSM
#"first view" is the model containing a view of the systems and devices in the Feature model.
#"second view" refers to the model containing devices with their operations/events and all their attributes

#TODO primo step: creare la vista (vuota) del nuovo modello: fatto
#TODO warning box che fa scegliere piattaforma: se non è azure allora vengono eseguiti gli altri script invece di questo
#TODO lo script carica un Feature Model System dal modello attivo e genera un X-IoT System con lo stesso nome e gli stessi attributi

GENERATE_SCENARIO

PROCEDURE global GENERATE_SCENARIO {
    CC "AdoScript" MLISTBOX entries:"ThingsBoard;Losant;Azure"
        toksep:";"
        title:"Select platform"
        oktext:"Generate"
        boxtext:"Select your desired platform"
        #extra:{CHECKBOX "Generate something else too additionally... (to be added)"}
    IF (endbutton = "ok") {
        # CC "AdoScript" INFOBOX (selection)
        CREATE_NEW_MODEL
    } ELSIF {
        EXIT
    }

    #TODO if selection is not azure, other scripts get executed instead
    # some global procedure call here
}

PROCEDURE global CREATE_NEW_MODEL {
    CC "CoreUI" MODEL_SELECT_BOX without-models mgroup-sel title:"Select a target modelgroup"
    IF (endbutton != "ok") {
        SETL targetID:-1
        EXIT
    }

    CC "Core" GET_MODEL_BASENAME modelid:(modelid)
    SETG a_dstmodelid:0
    SETL ecode:1

    WHILE (ecode != 0) {
    CC "AdoScript" EDITFIELD title:("Insert new model name..." + basename) caption:("~Modelname:")
    IF (ecode != 0) {
        SETL targetID:-1
        EXIT
    }
    CC "Core" CREATE_MODEL modeltype:("IoT Scenario") modelname:(text) version:"" mgroups:(mgroupids)
    IF (ecode = 0) {
        SET a_dstmodelid:(modelid)
    } ELSIF (ecode = 40) {
        CC "AdoScript" ERRORBOX ("A model with the same name already exists!") ok
    } ELSE {
        CC "AdoScript" ERRORBOX ("An error occured creating the new model: " + STR errtext) ok
    }
    CC "Core" SET_ATTR_VAL objid:(a_dstmodelid) attrname:"Model Type" val:("PSM")

    GENERATE_SYSTEMS
}

}

PROCEDURE global GENERATE_SYSTEMS {
    #faccio mappa almeno posso (se serve) aggiungere le tabelle
    SETG systemobjs:(map())
    CC "Modeling" GET_ACT_MODEL
    #copia tutti oggetti classe Feature (Feature model)
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:"Feature"
    FOR featureid in:(objids) {
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Name")
        SETL name:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Description")
        SETL description:(val)
        SETL systemobjs[featureid]:({
            "Name": name,
            "Description": description
        })
    }
    #copia tutti oggetti classe System (Feature model)
    # CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:"System"
    # FOR systemid in:(objids) {
    #     CC "Core" GET_ATTR_VAL objid:(VAL systemid) attrname:("Name")
    #     SETL name:(val)
    #     CC "Core" GET_ATTR_VAL objid:(VAL systemid) attrname:("Description")
    #     SETL description:(val)
    #     SETL systemobjs[systemid]:({
    #         "Name": name,
    #         "Description": description
    #     })
    # }

    CC "AdoScript" INFOBOX (systemobjs)
    #vengono inseriti anche tutti i device wtf
    #forse perché sono sottoclassi di Feature?!!!??

    #genera gli oggetti system nel nuovo modello IoT Scenario
    CC "Core" GET_CLASS_ID classname:"system"
    FOR systemid in:(mapKeysList(systemobjs)) sep:("~") {
        SETL system:(systemobjs[systemid])
        CC "Core" CREATE_OBJ modelid:(a_dstmodelid) classid:(classid) objname:(system["Name"])
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:"name" val:(system["Name"])
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:"description" val:(system["Description"])
    }
    
}

PROCEDURE global GENERATE_DEVICES_FIRST_VIEW {
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:"Device"
    SETG deviceobjs:(map())
    FOR deviceid in:(objids) {
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Name")
        SETL name:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Description")
        SETL description:(val)
    }
}

PROCEDURE global GENERATE_OPERATIONS {

}

PROCEDURE global GENERATE_EVENTS {

}