#this script generates two XIoT Scenario PSM views starting from a Feature Model PSM (with its Feature Operation Model PSM)
#"first view" is the model containing a view of the systems and devices in the Feature model.
#"second view" refers to the model containing devices with their operations/events and all their attributes

#a chi ha aperto questo script per modificare o altro: scusa è un macello mi dispiace

#obiettivo è creare psm della piattaforma giusta: pim viene creato solo per poter poi generare psm giusto
#TODO allora, nella prima view il posizionamento deve essere uguale al modello source (no reason for it not to do so)

GENERATE_SCENARIO

PROCEDURE global GENERATE_SCENARIO {
    CC "Modeling" GET_ACT_MODEL
    SETG a_srcmodelid:(modelid)
    SETG a_opssrcmodelid:0
    SETG a_dstmodelid:0
    SETG a_opsdstmodelid:0
    CC "AdoScript" MLISTBOX entries:"ThingsBoard;Losant;Azure"
        toksep:";"
        title:"Select platform"
        oktext:"Generate"
        boxtext:"Select your desired platform"
      # extra:{CHECKBOX "Generate devices view"}    #genera anche vista operazioni (esempio)
    IF (endbutton = "ok") {
        CREATE_NEW_XIOT_SCENARIOS    #crea le due viste PIM
        #LE INFOBOX SONO BRUTTE LEVARE
        IF (selection = "Azure") {
            CC "AdoScript" INFOBOX ("not yet implemented")
            EXIT
            # CC "Modeling" OPEN modelids:(a_dstmodelid)
            # PRESET_PSM platform:("Azure")
            # CC "Modeling" OPEN modelids:(a_opsdstmodelid)
            # PRESET_PSM platform:("Azure")
        } ELSIF (selection = "ThingsBoard") {
            CC "AdoScript" INFOBOX ("Now generating PSM...")
            CC "Modeling" OPEN modelids:(a_dstmodelid)
            PRESET_PSM platform:("ThingsBoard")
            CC "AdoScript" INFOBOX ("Now generating detailed view of the devices...")
            CC "Modeling" OPEN modelids:(a_opsdstmodelid)
            PRESET_PSM platform:("ThingsBoard")
        } ELSIF (selection = "Losant") {
            CC "AdoScript" INFOBOX ("Now generating PSM")
            CC "Modeling" OPEN modelids:(a_dstmodelid)
            PRESET_PSM platform:("Losant")
            CC "AdoScript" INFOBOX ("Now generating detailed view of the devices...")
            CC "Modeling" OPEN modelids:(a_opsdstmodelid)
            PRESET_PSM platform:("Losant")
        }
    }
    EXIT
}

PROCEDURE global CREATE_NEW_XIOT_SCENARIOS {
    CC "CoreUI" MODEL_SELECT_BOX without-models mgroup-sel title:"Select a target modelgroup"
    IF (endbutton != "ok") {
        SETL targetID:-1
        EXIT
    }
    CC "Core" GET_MODEL_BASENAME modelid:(modelid)
        SETL ecode:1
        WHILE (ecode != 0) {
        CC "AdoScript" EDITFIELD title:("Insert new model name..." + basename) caption:("~Modelname:")
        IF (ecode != 0) {
            SETL targetID:-1
            EXIT
        }
        CC "Core" CREATE_MODEL modeltype:("IoT Scenario") modelname:(text) version:"" mgroups:(mgroupids)
        IF (ecode = 0) {
            SET a_dstmodelid:(modelid)
        } ELSIF (ecode = 40) {
            CC "AdoScript" ERRORBOX ("A model with the same name already exists!") ok
            EXIT
        } ELSE {
            CC "AdoScript" ERRORBOX ("An error occured creating the new model: " + STR errtext) ok
            EXIT
        }
        CC "Core" CREATE_MODEL modeltype:("IoT Scenario") modelname:(text + " - operations") version:"" mgroups:(mgroupids)
        SET a_opsdstmodelid:(modelid)
        CC "Core" SET_ATTR_VAL objid:(a_dstmodelid) attrname:"Model Type" val:("PIM")
        GENERATE_ELEMENTS
    }

}

PROCEDURE global GENERATE_ELEMENTS {
    #copia tutti oggetti classe Feature (Feature model)
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(a_srcmodelid) classname:"Feature"
    SETL allobjs:(objids)
    LOAD_FEATURE_FEATURES featureobjs:(allobjs) featureobjsmap:objsmap
    CC "AdoScript" INFOBOX (objsmap)
    CREATE_SELECTED_OBJECTS featureobjs:(objsmap) featureobjsmap:objsmap
    CC "AdoScript" INFOBOX (objsmap)
    CREA_CONNETTORI featureobjs:(objsmap) ecode:ecode
    POSIZIONA_SAME_POS featureobjs:(objsmap) ecode:ecode

    #crea vista dettagliata dei dispositivi
    GENERATE_DEVICE_SECOND_VIEW featureobjs:(objsmap) ecode:ecode 
}

PROCEDURE global LOAD_FEATURE_FEATURES featureobjs:string featureobjsmap:reference {
    #didn't know allattrnames function existed..
    SET featureobjsmap:(map())
    FOR featureid in:(featureobjs) {
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Selection")
        IF (val = "Selected") {
            CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Name")
            SETL name:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Description")
            SETL description:(val)
            CC "Core" GET_CLASS_ID objid:(VAL featureid)
            CC "Core" GET_CLASS_NAME classid:(classid)
            SETL type:(classname)
            CC "Core" GET_ATTR_ID classid:(classid) attrname:"Position"
            CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrid:(attrid)
            LEO parse:(val) get-tmm-value:x:"x" get-tmm-value:y:"y"
            SETL featureobjsmap[featureid]:({
                "Name": name,
                "Description": description,
                "Class": type,
                "X": x,
                "Y": y
            })
        }
    }
}

PROCEDURE global CREATE_SELECTED_OBJECTS featureobjs:map featureobjsmap:reference {
    #questa funzione crea solamente gli oggetti, senza posizionarli o collegarli.

#TODO:creare interref da feature model a xiot scenario per ogni device (vedere se funziona)
#(...) forse conveniva creare una tabella separata per i device?
    SETG x:(2cm)
    SETG y:(2cm)
    CC "Modeling" OPEN modelids:(a_dstmodelid)
    SET ecode:0
    SETL currclass:"none"
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {
        SETL featureobj:(featureobjs[featureid])
        SETL featobjid:(featureid)
        GET_CORRECT_XIOT_CLASSID featobjid:(VAL featobjid) xiotclassid:xiotclassid
        CC "Core" CREATE_OBJ modelid:(a_dstmodelid) classid:(xiotclassid)
        SETL newobjid:(objid)
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:"name" val:(featureobj["Name"])
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:"description" val:(featureobj["Description"])
        SETL currclass:(featureobj["Class"])
        SETL devviewid:0
        IF (currclass = "Device") {
            CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(xiotclassid)    #creo anche su seconda view
            SET devviewid:(objid)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"name" val:(featureobj["Name"])
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"description" val:(featureobj["Description"])
            #location attribute
            CC "Core" GET_CLASS_ID classname:("location")
            CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(classid)
            SET locationid:(objid)
            CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Coverage")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"coverage" val:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("GeoPoints")
            IF (val != "") { #rivedere
                #formatta la stringa di merda
                #CC "Core" SET_ATTR_VAL objid:(objid) attrname:"lat" val:()
                #CC "Core" SET_ATTR_VAL objid:(objid) attrname:"lon" val:()
            }
            CC "Core" GET_CLASS_ID relation classname:"hasLocation"
            CC "Core" CREATE_CONNECTOR modelid:(a_opsdstmodelid) fromobjid:(devviewid) toobjid:(locationid) classid:(classid)
            CC "Core" GET_CLASS_ID classname:"device"
            CC "Core" GET_ATTR_ID classid:(classid) attrname:"structure"
            CC "Core" ADD_INTERREF objid:(devviewid) attrid:(attrid) toobjid:(newobjid)
            #aggiungere anche interref a modello source (feature psm) (mi sa impossibile)
        }
        CC "Core" GET_CONNECTORS objid:(VAL featureid) out
        SETL subs:""
        FOR connid in:(objids) {
            CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Selection")
            IF (val = "Selected") {
                SET subs:(subs + STR toobjid + " ")   # elemento a cui è collegato nel livello sotto
            }
        }
        SETL x:(featureobj["X"])
        SETL y:(featureobj["Y"])
        #CC "AdoScript" INFOBOX (subs)
        SETL featureobjs[featureid]:({
            "NewId": newobjid,  #VAL
            "Class": currclass,
            "Subs": subs,
            "DevViewId": devviewid,
            "X": x,
            "Y": y
        })
    }

    SET featureobjsmap:(featureobjs)    #per reference
}

PROCEDURE global CREA_CONNETTORI featureobjs:map ecode:reference {
    SET ecode:0
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {
        SETL featureobj:(featureobjs[featureid])
        IF (featureobj["Class"] = "Feature") {
            CC "Core" GET_CLASS_ID relation classname:"subsystem"
            SETL relclassid:(classid)
        } ELSIF (featureobj["Class"] = "System") {
            CC "Core" GET_CLASS_ID relation classname:"hasDevice"
            SETL relclassid:(classid)
        }
        SETL subs:(featureobj["Subs"])
        FOR sub in:(subs) {
            IF (sub != "" AND sub != " ") {
                SETL xiotobjid:(featureobjs[sub]["NewId"])
                CC "Core" CREATE_CONNECTOR modelid:(a_dstmodelid) fromobjid:(featureobj["NewId"]) toobjid:(xiotobjid) classid:(relclassid)
            }
        }
    }
}

PROCEDURE global POSIZIONA_SAME_POS featureobjs:map ecode:reference {
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {
        SETL currobj:(featureobjs[featureid])
        CC "Modeling" SET_OBJ_POS objid:(currobj["NewId"]) 
            x:(currobj["X"]) y:(currobj["Y"])
    }
}

PROCEDURE global POSIZIONA featureobjs:map ecode:reference {
    SETG x:(2cm)
    SETG y:(2cm)
    # CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(a_dstmodelid) classname:"system"
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {
        SETL currobj:(featureobjs[featureid])
        IF (currobj["Class"] = "Feature") {
            CC "Modeling" SET_OBJ_POS objid:(currobj["NewId"]) x:(x) y:(y)
            NEXT_POSITION
        }
    }
    NEW_ELEMENT_LINE
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {
        SETL currobj:(featureobjs[featureid])
        IF (currobj["Class"] = "System") {
            CC "Modeling" SET_OBJ_POS objid:(currobj["NewId"]) x:(x) y:(y)
            NEXT_POSITION
        }
    }
    NEW_ELEMENT_LINE
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {
        SETL currobj:(featureobjs[featureid])
        IF (currobj["Class"] = "Device") {
            CC "Modeling" SET_OBJ_POS objid:(currobj["NewId"]) x:(x) y:(y)
            NEXT_POSITION
        }
    }
}

PROCEDURE global GET_CORRECT_XIOT_CLASSID featobjid:integer xiotclassid:reference {
    CC "Core" GET_CLASS_ID objid:(featobjid)
    CC "Core" GET_CLASS_NAME classid:(classid)
    SETL featclassname:(classname)
    IF (featclassname = "Feature" OR featclassname = "System") {
        CC "Core" GET_CLASS_ID classname:("system")
    } ELSIF (featclassname = "Device") {
        CC "Core" GET_CLASS_ID classname:("device")
    } ELSIF (featclassname = "Operation") {
        CC "Core" GET_ATTR_VAL objid:(featobjid) attrname:("Class")
        IF (val = "Event") {
            CC "Core" GET_CLASS_ID classname:("Event")
        } ELSIF (val = "Operation") {
            CC "Core" GET_CLASS_ID classname:("Device Operation")
        }
    }
    SET xiotclassid:(classid)
}

PROCEDURE global GENERATE_DEVICE_SECOND_VIEW featureobjs:map ecode:reference {
#a questo punto i device stanno già dentro la seconda view! bisogna aggiungere operazioni/eventi
#metto solamente operazioni/eventi con i loro attributi nella mappa
    SETL devicesmap:(map())
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {
        SETL currobj:(featureobjs[featureid])
        IF (currobj["Class"] = "Device") {
            SETL newdevid:(currobj["DevViewId"])
            #SETL newdevfirstview:(currobj["NewId"])
            # ^ per prendere id dello stesso device nella prima view (TODO aggiungere interref)
            SETL devicesmap[featureid]:({   #id nel feature model sorgente
                "NewId": newdevid,  #id nella seconda view (operazioni)
                "Operations": {}
            })
            SETL operations:({})
            SETL device:(devicesmap[featureid])
            #prendi interref da device -> risali a id del device nel feature psm ops model
            CC "Core" GET_CONNECTORS objid:() out  #rivedere
            FOR connid in:(objids) {
                SETL operation:(map())
                CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
                CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Selection")
                IF (val = "Selected") {
                    CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Operation Name")
                    SETL operation["Name"]:(val)
                    CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Description")
                    SETL operation["Description"]:(val)
                    CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Required")
                    SETL operation["Type"]:(val)
                    CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Data Type")
                    SETL operation["Data Type"]:(val)
                    CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Service")
                    SETL operation["Service"]:(val)
                    CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("specification")
                    #rivedere specification perché è na tabella
                    # SETL operation["Specification"]:(val)
                    
                    SETL n:(aappend(operations, operation))
                }
            }
            SETL device["Operations"]:(operations)
            SETL devicesmap[featureid]:(device)
        } 
    }
    CC "AdoScript" INFOBOX (devicesmap) #OPERATIONS NON SONO CARICATE WTF

    CC "Modeling" OPEN modelids:(a_opsdstmodelid)
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(a_opsdstmodelid) classname:("device")
    SETL devids:(objids)
    #nuovi id stanno in devids. i device con le ops stanno in devicesmap.
    SETG x:(2cm)
    SETG y:(2cm)
    FOR devid in:(devids) {
        #posiziona device correttamente
        CC "Modeling" SET_OBJ_POS objid:(VAL devid) x:(x) y:(y)
        NEXT_POSITION
    }
    NEW_ELEMENT_LINE
    # GENERATE_DEVICES_OPERATIONS #(chiamare funzione separata?)
    FOR deviceid in:(mapKeysList(devicesmap)) sep:("~") {
        SETL device:(devicesmap[deviceid])
        SETL operations:(device["Operations"])
        SETL nops:(operations.length)
        FOR i from:0 to:(nops-1) {
            SETL name:(operations[i]["Name"])
            SETL description:(operations[i]["Description"])
            SETL required:(operations[i]["Required"])
            SETL type:(operations[i]["Type"])
            SETL service:(operations[i]["Service"])
            IF (type = "Event") {
                CC "Core" GET_CLASS_ID classname:("Event")
                SETL rightclassid:(classid)
                CC "Core" GET_CLASS_ID relation classname:("hasEvent")
                SETL rightrelclassid:(classid)
            } ELSE {
                CC "Core" GET_CLASS_ID classname:("Device Operation")
                SETL rightclassid:(classid)
                CC "Core" GET_CLASS_ID relation classname:("hasOperation")
                SETL rightrelclassid:(classid)
            }
            CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(rightclassid) objname:(name)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(name)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(description)
            SETL newobjid:(objid)
            CC "Core" CREATE_CONNECTOR modelid:(a_opsdstmodelid) fromobjid:(device["NewId"]) toobjid:(newobjid) classid:(rightrelclassid)

            CC "Core" GET_CLASS_ID classname:"service"
            CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(classid)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("protocol") val:(service)
            CC "Core" GET_CLASS_ID relation classname:"hasService"
            CC "Core" CREATE_CONNECTOR modelid:(a_opsdstmodelid) fromobjid:(newobjid) toobjid:(objid) classid:(classid)

            CC "Modeling" SET_OBJ_POS objid:(objid) x:(x) y:(y)
            NEXT_DEV_POSITION
        }
    }
    #TODO sistemare anche location e oggetti attributi vari.
    #1a fila: device. 2a fila: ops/events e location. 3a fila: attributi/widgets/services
}

PROCEDURE global NEW_ELEMENT_LINE {
    SET x:2cm
    SET y:(y + 6cm)
}

PROCEDURE global NEXT_DEV_POSITION {
    #-----> RESULT x:measure y:measure
    IF (x > 15cm) {
        SET x:1cm
        SET y:(y + 3cm)
    } ELSE {
        SET x:(x + 3cm)
    }
    CC "Modeling" SAVE modelid:(a_dstmodelid)
}

FUNCTION escapeStringForGeoPoints:global s:string
return:(replall(
    replall(s,
        ":", ";"),
    " ", "")
)