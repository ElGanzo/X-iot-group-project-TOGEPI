# Version: 1.0.1
# Date: 2022-02-16

# This file contains global functions which help using JSON values.


### Direct Dependencies: None


# Available functions:
# * lam_toJson - transforms an ADOxx value into a JSON representation.
# * mapToJson - transforms a map into a JSON representation (as a string).
# * arrayToJson - transforms an array into a JSON representation (as a string).
# * fromJson - transforms a JSON representation as a string into the
#     corresponding ADOxx value.


# A note on indentation: they are done using two spaces. A single indentation
# is done when putting parameters/parts in a new line. For example when the
# second parameter of a cond(...) is put in a new line then it is indented
# once. If the second parameter of a cond(...) is a sequence enclosed in
# parentheses, the opening parentheses is in the same line as the cond(...) and
# the first element of that sequence is put in a new line, then that first
# element will be indented twice from the cond(...). Example:
# return:(
#   cond(maybeTrue, (
#       doAForTrue,
#       doBForTrue),
#     doCForElse)
# )



### JSON conversions (change type)
# Functions for conversions between JSON strings and ADOxx data types.
# Because of differnces between JSON and ADOxx there are some concessions
# necessary (see comments of mapToJson, arrayToJson and fromJson functions).
# Therefore performing a round-trip can lead to a different outcome than the
# used input (whitespaces, data types etc.).
# Also for conversion to JSON only a map and an array function is provided,
# since all the other types can be simply transformed using the STR and mstr()
# functions of ADOxx (use STR for numeric values, mstr() to escape strings and
# mstr(STR) for expresions and lambda).



#------------------------------------------------------------------------------
SETG lam_toJson:(lambda(input,
# It returns a string containing the JSON representation of the value.
#
# input - IN - the input to convert to JSON.
#
# Example usage:
#   lam_toJson(3475.32)
  cond(
    type(input)="string",
    mstr(input),
    (type(input)="integer") OR (type(input)="real"),
    STR input,
    (type(input)="measure") OR (type(input)="time") OR (type(input)="expression") OR (type(input)="lambda"),
    mstr(STR input),
    type(input)="array",
    arrayToJson(input),
    type(input)="map",
    mapToJson(input),
    "" # "undefined"
  )
))
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
FUNCTION mapToJson:global input:map
# Takes as an input an ADOxx map and transforms it into a string containing a
# JSON object.
# Necessary concessions:
# * All keys of the map will be transformed into strings. This can lead to
#     losing some values, e.g. {0:"a", "0":"b", 1:"c"} -> {"0":"b", "1":"c"}.
# * Since there are no true/false/null values in ADOxx these will not be found
#     in the resulting JSON.
# * JSON doesn't have measure, time, expression or lambda types, so any of
#     those will be transformed into strings instead.
#
# input - IN - an ADOxx map to transform into JSON representation.
#
# Example usage:
#   mapToJson({0:"a", "0":"b", "subMap":{"a":0}, "anArray":{1, 2, 3}})
#------------------------------------------------------------------------------
return:(
  set(result, ""),
  for(i, 0, (LEN input)-1, (
      set(key, input.key(i)),
      set(value, input[key]),
      cond(type(key) <> "string",
        cond(type(input[STR key]) = "undefined",
          set(key, STR key),
          set(key, undefined)
        ),
        0
      ),
      cond(type(key) <> "undefined", (
          set(valueType, type(value)),
          cond(valueType = "string",
            set(result, tokcat(result, (mstr(key) + ":" + mstr(value)), ",")),
            (valueType = "integer") OR (valueType = "real"),
            set(result, tokcat(result, (mstr(key) + ":" + STR value), ",")),
            valueType = "map",
            set(result, tokcat(result, (mstr(key) + ":" + mapToJson(value)), ",")),
            valueType = "array",
            set(result, tokcat(result, (mstr(key) + ":" + arrayToJson(value)), ",")),
            (valueType = "measure") OR (valueType = "time") OR (valueType = "expression") OR (valueType = "lambda"),
            set(result, tokcat(result, (mstr(key) + ":" + mstr(STR value)), ",")),
            0 # "undefined"
          )
        ),
        0
      )
    ),
    ("{" + result + "}")
  )
)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION arrayToJson:global input:array
# Takes as an input an ADOxx array and transforms it into a string containing a
# JSON array.
# Necessary concessions:
# * All keys of a map will be transformed into strings. This can lead to
#     losing some values, e.g. {0:"a", "0":"b", 1:"c"} -> {"0":"b", "1":"c"}.
# * Since there are no true/false/null values in ADOxx these will not be found
#     in the resulting JSON.
# * JSON doesn't have measure, time, expression or lambda types, so any of
#     those will be transformed into strings instead.
#
# input - IN - an ADOxx array to transform into JSON representation.
#
# Example usage:
#   arrayToJson({"a", "b", {"a":0}, {1, 2, 3}})
#------------------------------------------------------------------------------
return:(
  set(result, ""),
  for(i, 0, (LEN input)-1, (
      set(value, input[i]),
      set(valueType, type(value)),
      cond(valueType = "string",
        set(result, tokcat(result, mstr(value), ",")),
        (valueType = "integer") OR (valueType = "real"),
        set(result, tokcat(result, STR value, ",")),
        valueType = "map",
        set(result, tokcat(result, mapToJson(value), ",")),
        valueType = "array",
        set(result, tokcat(result, arrayToJson(value), ",")),
        (valueType = "measure") OR (valueType = "time") OR (valueType = "expression") OR (valueType = "lambda"),
        set(result, tokcat(result, mstr(STR value), ",")),
        0 # "undefined"
      )
    ),
    ("[" + result + "]")
  )
)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION fromJson:global input:string
# Takes as an input a string representing valid JSON and transforms it into
# the most fitting type in ADOxx. It does not validate whether the JSON is
# correct, therefore if the provided JSON string is not valid JSON then the
# result can be wrong or the function can throw an error.
# Transformation:
# JSON object -> ADOxx map
# JSON array -> ADOxx array
# JSON string -> ADOxx string
# JSON (simple-)number -> ADOxx integer or real
# Necessary concessions:
# * Numbers using an exponent (e.g. 3.64e10) will become strings.
# * true (from JSON) will become 1 (interpreted as true).
# * false (from JSON) will become 0 (interpreted as false).
# * null (from JSON) will become the string "null".
#
# input - IN - a string representation of valid JSON data.
#
# Example usage:
#   fromJson("{\"0\":\"a\", \"subMap\":{\"a\":0}, \"anArray\":[1, {}, 3]}")
#------------------------------------------------------------------------------
return:(
  # Returns either: a map (for objects), an array, a string or a number (also for boolean).
  set(result, fromJson_getValueMap(input, 0, LEN input)),
  result["value"]
)
#------------------------------------------------------------------------------



# Following functions are "internal" ones for transforming values from JSON.
# Note: right now we use "null" to represent null values. However if we decide
# in the future to use undefined we have to extend the returned map to also
# contain a "nullValue" field.
# This affects at least the following functions:
# * fromJson_getValueMap
# * fromJson_parseObjectIntoValueMap
# * fromJson_parseArrayIntoValueMap
# * fromJson_getStringValueMap
# * fromJson_getNumberValueMap
# * fromJson_getBooleanValueMap
# * fromJson_getNullValueMap
# (In general functions with names ending in "ValueMap")

#------------------------------------------------------------------------------
FUNCTION fromJson_getValueMap:global input:string start:integer end:integer
# Takes as an input a string representing valid JSON and looks between start
# end for a JSON value (object, array, string, number, boolean or null).
# The returned value is actually a complex value (map), containing the member
# "value" which has the found value as an ADOxx type and "processed" which
# contains the amount of characters that have been processed (i.e. how far the
# value's end is in the string after start).
# Note: start+"processed" = position right after the end of the value.
# Note: the end is important here, so it doesn't search too far. There is no
# universal delimiter we can rely on (unlike for objects, arrays and strings).
#
# input - IN - a string containing the JSON to parse for a value.
# start - IN - the position where to start looking for the value.
# end - IN - what should be the furthest position to look for a value. This
#       must not be larger than the length of input.
# 
# Example usage:
#   fromJson_getValueMap("{\"anArray\":[1, {}, 3]}", 11, 22)
#------------------------------------------------------------------------------
return:(
  set(value, {"processed": 0}),
  # We increment from start until we find something we can to use.
  set(caretPos, start),
  #TODO if undefined is ever used to represent null then the condition of the
  # while loop will have to change.
  while((caretPos <= end) AND (type(value["value"]) = "undefined"), (
      set(caretVal, (input SUB caretPos)),
      cond(caretVal = "{",
        set(value, fromJson_getObjectValueMap(input, caretPos)), # for objects
        caretVal = "[",
        set(value, fromJson_getArrayValueMap(input, caretPos)), # for arrays
        caretVal = "\"",
        set(value, fromJson_getStringValueMap(input, caretPos)), # for strings
        search("-0123456789", caretVal, 0) >= 0, # numbers can start with any of these characters
        set(value, fromJson_getNumberValueMap(input, caretPos)), # for numbers
        search("tf", caretVal, 0) >= 0, # boolean values start with true or false
        set(value, fromJson_getBooleanValueMap(input, caretPos)), # for boolean
        caretVal = "n", # null values start with an n
        set(value, fromJson_getNullValueMap(input, caretPos)), # for null
        0 # otherwise it's something we ignore, like white space.
      ),
      set(caretPos, caretPos+1)
    ),
    cond(type(value) <> "undefined",
      {"value": value["value"], "processed": (value["processed"] + caretPos - start - 1)},
      {"processed": (caretPos - start - 1)}
    )
  )
)

#------------------------------------------------------------------------------
FUNCTION fromJson_findObjectEnd:global input:string start:integer
# Takes as an input a string representing valid JSON and from start looks for
# the end of a JSON object. The result is the position of the closing bracket
# for the object in input or the end of the input (whichever comes first). It
# properly ignores nested ojbects or curly brackets in strings.
#
# input - IN - a string containing the JSON to parse.
# start - IN - the position in input where the JSON object starts, i.e. the
#       positon of { in input.
# 
# Example usage:
#   fromJson_findObjectEnd("{\"0\":\"a\", \"subMap\":{\"a\":0}, \"anArray\":[1, {}, 3]}", 19)
#------------------------------------------------------------------------------
return:(
  set(end, start+1),
  set(depth, 0), # depth is used to ignore nested objects.
  while((end < LEN input) AND (((input SUB end) <> "}") OR (depth > 0)), (
      cond((input SUB end) = "{",
        set(depth, depth+1),
        (input SUB end) = "}",
        set(depth, depth-1),
        (input SUB end) = "\"", # Strings could contain {}, so skip them
        set(end, fromJson_findStringEnd(input, end)),
        0
      ),
      set(end, end+1)),
    end
  )
)

#------------------------------------------------------------------------------
FUNCTION fromJson_getObjectValueMap:global input:string start:integer
# Takes as an input a string representing valid JSON and assumes that a JSON
# object is defined beginning from start.
# The returned value is actually a complex value (map), containing the member
# "value" which has the JSON object as an ADOxx map and "processed" which
# contains the amount of characters that have been processed (i.e. how far the
# objects's end is in the string after start).
# Note: start + "processed" = position right after the } of the object.
#
# input - IN - a string containing the JSON to parse.
# start - IN - the position in input where the JSON object starts, i.e. the
#       positon of { in input.
# 
# Example usage:
#   fromJson_getObjectValueMap("{\"0\":\"a\", \"subMap\":{\"a\":0}, \"anArray\":[1, {}, 3]}", 19)
#------------------------------------------------------------------------------
return:(
  fromJson_parseObjectIntoValueMap(input, start, fromJson_findObjectEnd(input, start))
)

#------------------------------------------------------------------------------
FUNCTION fromJson_parseObjectIntoValueMap:global input:string start:integer end:integer
# Parses the JSON between (including) start and end as a JSON object into an
# ADOxx map.
# The returned value is actually a complex value (map), containing the member
# "value" which has the JSON object as an ADOxx map and "processed" which
# contains the amount of characters that have been processed (i.e. how far the
# objects's end is in the string after start).
# The input between start and end MUST be exactly the object.
# Note: start + "processed" = position right after the } of the object.
#
# input - IN a string containing the JSON to parse.
# start - IN - the position in input where the JSON object starts, i.e. the
#       positon of { in input (input SUB start = "{").
# end - IN the position in input where the JSON object ends, i.e. the position
#       of } in input (input SUB end = "}").
# 
# Example usage:
#   fromJson_parseObjectIntoValueMap("{\"0\":\"a\", \"subMap\":{\"a\":0}, \"anArray\":[1, {}, 3]}", 19, 25)
#------------------------------------------------------------------------------
return:(
  set(obj, ""), # Init obj as an empty string
  set(fields, {}), # Array to store all obj fields, before evaluation
  set(caretPos, start+1), # We assume that the object starts with {
  # States:
  # 0 - looking for member-name
  # 1 - member-name found, looking for :
  # 2 - looking for member-value
  # 3 - member-value found, set it in the result
  set(state, 0),
  set(key, ""),
  set(value, 0),
  while(caretPos <= end, (
      set(caretVal, (input SUB caretPos)),
      cond(state = 0, # In this state we are looking for a string-key.
        cond(caretVal = "\"", (
            set(key, fromJson_getStringValueMap(input, caretPos)),
            set(state, 1),
            set(caretPos, caretPos + key["processed"]),
            set(caretVal, try(input SUB caretPos, ""))
          ),
          0
        ),
        0
      ),
      cond(state = 1, # in this state we are looking for the ":" character.
        cond(caretVal = ":", (
            set(state, 2),
            set(caretPos, caretPos + 1),
            set(caretVal, try(input SUB caretPos, ""))
          ),
          0
        ),
        0
      ),
      cond(state = 2, ( # in this state we are looking for the value belonging to the previously found string-key.
          set(value, fromJson_getValueMap(input, caretPos, end)),
          set(state, 3),
          set(caretPos, caretPos + value["processed"]),
          set(caretVal, try(input SUB caretPos, ""))
        ),
        0
      ),
      cond(state = 3, ( # in this state we add the found member to the resulting map.
          # Any of the following two lines crash ADOxx. Seems set(...) doesn't work for members of a map.
          #set(obj[key["value"]], value["value"]),
          #set(obj SUB (key["value"]), value["value"]),
          # I guess the only solution is to build a "map string" and then evaluate that for now ...
          # Since we are building a map string we have to place the keys and values in ""
          #set(obj, tokcat(obj, ("\"" + key["value"] + "\": " + cond(type(value["value"]) = "string", "\"" + value["value"] + "\"", STR value["value"])), ",")),
          cond(type(value["value"]) = "string", set(value, eval("{\"value\":\"" + value["value"] + "\"}")), 0),
          aappend(fields, {"key": key["value"], "value": value["value"]}), # Append field as a map that contains key and value
          set(state, 0)
        ),
        0
      ),
      set(caretPos, caretPos+1)
    ), (
      cond(fields.empty, set(obj, map()), (
        # Create obj with all keys and empty values
        set(n, 0),
        while (n < fields.length, (
            set(field, fields[n]),
            set(obj, tokcat(obj, ("\"" + field["key"] + "\": \"\""), ",")),
            set(n, n+1)
          )
        ),
        # Set obj fields' value
        set(n, 0),
        set(obj, eval("{" + obj + "}")),
        while (n < fields.length, (
            set(field, fields[n]),
            set(obj[field["key"]], field["value"]),
            set(n, n+1)
          )
        )
      )),
      #{"value": eval("{" + obj + "}"), "processed": (caretPos - start)}
      {"value": obj, "processed": (caretPos - start)}
    )
  )
)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION fromJson_findArrayEnd:global input:string start:integer
# Takes as an input a string representing valid JSON and from start looks for
# the end of a JSON array. The result is the position of the closing bracket
# for the array in input or the end of the input (whichever comes first). It
# properly ignores nested arrays or square brackets in strings.
#
# input - IN - a string containing the JSON to parse.
# start - IN - the position in input where the JSON array starts, i.e. the
#       positon of ] in input.
# 
# Example usage:
#   fromJson_findArrayEnd("{\"0\":\"a\", \"subMap\":{\"a\":0}, \"anArray\":[1, {}, 3]}", 38)
#------------------------------------------------------------------------------
return:(
  set(end, start+1),
  set(depth, 0), # depth is used to ignore nested arrays.
  while((end < LEN input) AND (((input SUB end) <> "]") OR (depth > 0)), (
      cond((input SUB end) = "[",
        set(depth, depth+1),
        (input SUB end) = "]",
        set(depth, depth-1),
        (input SUB end) = "\"", # Strings could contain [], so skip them
        set(end, fromJson_findStringEnd(input, end)),
        0
      ),
      set(end, end+1)),
    end
  )
)

#------------------------------------------------------------------------------
FUNCTION fromJson_getArrayValueMap:global input:string start:integer
# Takes as an input a string representing valid JSON and assumes that a JSON
# array is defined beginning from start.
# The returned value is actually a complex value (map), containing the member
# "value" which has the JSON array as an ADOxx array and "processed" which
# contains the amount of characters that have been processed (i.e. how far the
# array's end is in the string after start).
# Note: start + "processed" = position right after the ] of the array.
#
# input - IN - a string containing the JSON to parse.
# start - IN - the position in input where the JSON array starts, i.e. the
#       positon of [ in input.
# 
# Example usage:
#   fromJson_getArrayValueMap("{\"0\":\"a\", \"subMap\":{\"a\":0}, \"anArray\":[1, {}, 3]}", 38)
#------------------------------------------------------------------------------
return:(
  fromJson_parseArrayIntoValueMap(input, start, fromJson_findArrayEnd(input, start))
)

#------------------------------------------------------------------------------
FUNCTION fromJson_parseArrayIntoValueMap:global input:string start:integer end:integer
# Parses the JSON between (including) start and end as a JSON array into an
# ADOxx array.
# The returned value is actually a complex value (map), containing the member
# "value" which has the JSON array as an ADOxx array and "processed" which
# contains the amount of characters that have been processed (i.e. how far the
# array's end is in the string after start).
# The input between start and end MUST be exactly the array.
# Note: start + "processed" = position right after the ] of the array.
#
# input - IN a string containing the JSON to parse.
# start - IN - the position in input where the JSON array starts, i.e. the
#       positon of [ in input (input SUB start = "[").
# end - IN the position in input where the JSON array ends, i.e. the position
#       of ] in input (input SUB end = "]").
# 
# Example usage:
#   fromJson_parseArrayIntoValueMap("{\"0\":\"a\", \"subMap\":{\"a\":0}, \"anArray\":[1, {}, 3]}", 38, 47)
#------------------------------------------------------------------------------
return:(
  set(arr, array(0)),
  set(caretPos, start+1), # We assume that the array starts with [
  while(caretPos <= end, (
      set(value, fromJson_getValueMap(input, caretPos, end)),
      #TODO if we use "undefined" to represent "null" values then the "result map" will have to change (it will at least need an "hasValue" or "nullValue" entry or something like that)
      cond((type(value["value"]) <> "undefined"),
        aappend(arr, value["value"]),
        try(value["nullValue"] <> 0, 0),
        aappend(arr, value["value"]),
        0
      ),
      set(caretPos, try(caretPos + value["processed"] + 1, caretPos + 1))
    ),
    {"value": (arr), "processed": (caretPos - start)}
  )
)

#------------------------------------------------------------------------------
FUNCTION fromJson_findStringEnd:global input:string start:integer
# Takes as an input a string, expecting it to contain an "escaped string"
# inside of it starting at start and looks for the end of the "escaped string".
# The returned value is the position of the closing double quotes or the NUL
# charcter at the end of the string (at LEN input).
# Note: (input SUB (LEN input)) does not produce an error! Instead it results
# in the NUL character. ASC (input SUB (LEN input)) produces 0.
#
# Example usage:
#   fromJson_findStringEnd("He\"ll\"ooo", 2)
#       -> returns 5       ^012 345 678
#   fromJson_findStringEnd("He\"llooo", 2)
#       -> returns 8       ^012 34567
#------------------------------------------------------------------------------
return:(
  set(end, start+1),
  set(escaped, 0), # indicates that the escape character \ has been encountered before
  while((end < LEN input) AND (((input SUB end) <> "\"") OR (escaped)), (
      cond(escaped, set(escaped, 0), cond((input SUB end) = "\\", set(escaped, 1), 0)),
      set(end, end+1)),
    end
  )
)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION fromJson_getStringValueMap:global input:string start:integer
# Takes as an input a string representing valid JSON and assumes that a JSON
# string is defined beginning from start.
# The returned value is actually a complex value (map), containing the member
# "value" which has the JSON string as an ADOxx string and "processed" which
# contains the amount of characters that have been processed (i.e. how far the
# strings's end is in the string after start). Note that processed includes the
# double quotes of the string (e.g. for "007" it is 5 characters).
# Note: start + "processed" = position right after the string.
#
# input - IN - a string containing the JSON to parse.
# start - IN - the position in input where the JSON string starts, i.e. the
#       positon of " in input.
# 
# Example usage:
#   fromJson_getStringValueMap("{\"0\":\"a\", \"subMap\":{\"a\":0}, \"anArray\":[1, {}, 3]}", 1)
#------------------------------------------------------------------------------
return:(
  # -1 instead of +1 because the end is the position of the closing " and we also start a character later.
  set(tempResult, copy(input, start+1, fromJson_findStringEnd(input, start) - start - 1)),
  {"value": (tempResult), "processed": (2 + LEN tempResult)} # the +2 is there because of the ""
)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION fromJson_findNumberEnd:global input:string start:integer
# Takes as an input a string, expecting it to contain a number inside of it
# starting at start and looks for the end of the number.
# The returned value is the position AFTER the last character of the number.
# This does not validate whether the number is correct or not!
# Note: start - result = length of the number
#
# Example usage:
#   fromJson_findNumberEnd("   42.69  ", 3)
#       -> returns 8       ^012345678
#   fromJson_findNumberEnd("   42.6.9  ", 3)
#       -> returns 9       ^0123456789
#------------------------------------------------------------------------------
return:(
  set(end, start),
  set(escaped, 0),
  # Note that we don't check whether the number is correct
  while((end < LEN input) AND (search("-0123456789.eE+", input SUB end, 0) >= 0),
    set(end, end+1),
    end
  )
)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION fromJson_getNumberValueMap:global input:string start:integer
# Takes as an input a string representing valid JSON and assumes that a JSON
# number is defined beginning from start.
# The returned value is actually a complex value (map), containing the member
# "value" which has the JSON number as an ADOxx number or string and "processed"
# which contains the amount of characters that have been processed (i.e. how far
# the number's end is in the string after start). The "value" will be a string
# instead of a number if the JSON data uses exponent notation (e.g. 10e3).
# Note: start + "processed" = position right after the number.
#
# input - IN - a string containing the JSON to parse.
# start - IN - the position in input where the JSON number starts, i.e. the
#       positon of + or the first digit in input.
# 
# Example usage:
#   fromJson_getNumberValueMap("{\"0\":\"a\", \"subMap\":{\"a\":0}, \"anArray\":[1, {}, 3]}", 24)
#------------------------------------------------------------------------------
return:(
  set(numberString, copy(input, start, fromJson_findNumberEnd(input, start) - start)),
  set(indexE, search(numberString, "e", 0)),
  cond(indexE < 0, set(indexE, search(numberString, "E", 0)), 0),
  cond(indexE < 0,
    {"value": (VAL numberString), "processed": (LEN numberString)},
    (
      set(value, copy(numberString, 0, indexE)),
      set(exponent, copy(numberString, indexE+1, -1)),
      {"value": ((VAL value) * pow(10, VAL exponent)), "processed": (LEN numberString)}
    )
  )
)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION fromJson_findBooleanEnd:global input:string start:integer
# Takes as an input a string, expecting it to contain a boolean value inside of
# it starting at start and looks for the end of the boolean value.
# The returned value is the position AFTER the last character of the value.
# This does not validate whether the boolean value is correct or not!
# Note: start - result = length of the boolean value.
#
# Example usage:
#   fromJson_findBooleanEnd("  true     ", 2)
#       -> returns 6        ^0123456
#   fromJson_findBooleanEnd("  tureue     ", 2)
#       -> returns 8        ^012345678
#------------------------------------------------------------------------------
return:(
  set(end, start),
  set(escaped, 0),
  while((end < LEN input) AND (search("truefals", input SUB end, 0) >= 0),
    set(end, end+1),
    end
  )
)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION fromJson_getBooleanValueMap:global input:string start:integer
# Takes as an input a string representing valid JSON and assumes that a JSON
# boolean value is defined beginning from start.
# The returned value is actually a complex value (map), containing the member
# "value" which has the JSON boolean value as an ADOxx number and "processed"
# which contains the amount of characters that have been processed (i.e. how far
# the boolean's end is in the string after start). The "value" will be 1 for
# true and 0 for false.
# Note: start + "processed" = position right after the boolean value.
#
# input - IN - a string containing the JSON to parse.
# start - IN - the position in input where the JSON boolean value starts, i.e.
#       the positon of t or f in input.
# 
# Example usage:
#   fromJson_getBooleanValueMap("{\"0\":true, \"subMap\":{\"a\":0}}", 5)
#------------------------------------------------------------------------------
return:(
  set(booleanString, copy(input, start, fromJson_findBooleanEnd(input, start) - start)),
  cond (booleanString = "true",
    {"value": 1, "processed": (LEN booleanString)},
    booleanString = "false",
    {"value": 0, "processed": (LEN booleanString)},
    {"processed": (LEN booleanString)}
  )
)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION fromJson_findNullEnd:global input:string start:integer
# Takes as an input a string, expecting it to contain a bull value inside of
# it starting at start and looks for the end of the null value.
# The returned value is the position AFTER the last character of null.
# This does not validate whether the null value is correct or not!
# Note: start - result = length of the boolean value.
#
# Example usage:
#   fromJson_findNullEnd("  null     ", 2)
#       -> returns 6     ^0123456
#   fromJson_findNullEnd("  nuuul     ", 2)
#       -> returns 7     ^01234567
#------------------------------------------------------------------------------
return:(
  set(end, start),
  set(escaped, 0),
  while((end < LEN input) AND (search("nul", input SUB end, 0) >= 0),
    set(end, end+1),
    end
  )
)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION fromJson_getNullValueMap:global input:string start:integer
# Takes as an input a string representing valid JSON and assumes that a JSON
# null value is defined beginning from start.
# The returned value is actually a complex value (map), containing the member
# "value" which has the JSON null value as an ADOxx string and "processed"
# which contains the amount of characters that have been processed (i.e. how far
# the null's end is in the string after start). The "value" will be the
# string "null" if the part of the JSON matches the string "null".
# Note: start + "processed" = position right after the null value.
#
# input - IN - a string containing the JSON to parse.
# start - IN - the position in input where the JSON null value starts, i.e.
#       the positon of n in input.
# 
# Example usage:
#   fromJson_getNullValueMap("{\"0\":null, \"subMap\":{\"a\":0}}", 5)
#------------------------------------------------------------------------------
return:(
  set(nullString, copy(input, start, fromJson_findNullEnd(input, start) - start)),
  cond (nullString = "null",
    {"value": "null", "processed": (LEN nullString)},
    {"processed": (LEN nullString)}
  )
)
#------------------------------------------------------------------------------
