# Version: 1.0.2
# Date: 2022-02-23

# This file contains global (lambda) functions which help with conversion of
# different values. Both for different types (e.g. toString) or sub-types
# (e.g. decToHex)


### Direct Dependencies: None


# The functions are roughly separated into three types:
# * Conversions of the data type (string, integer, real, measure etc.).
# * Conversions of the value in the same type (string to string etc.).
# * Conversions of the value that require a change of the type (decimal
#      integer to hexadecimal string).


# Available functions for conversion:
# * lam_toString - ensures the result is a string (a STR that doesn't fail).
# * lam_toBoolean - provides a result is a value that is interpreted as true
#     or false according to specific rules.
# * lam_toNumber - tries to transform a value into an integer or real number.
# * toNumber - tries to transform a string into an integer or real number.
# * escapeStringUriStyle - encodes all characters that aren't allowed using
#     URI style % escape.
# * escapeStringForPath - replaces all characters that aren't allowed in a
#     file path with hyphens (-).
# * decToHex - transforms a decimal integer into a string containing the
#     hexadecimal value.
# * hexToDec - transforms a hexadecimal string into a decimal integer.


# A note on indentation: they are done using two spaces. A single indentation
# is done when putting parameters/parts in a new line. For example when the
# second parameter of a cond(...) is put in a new line then it is indented
# once. If the second parameter of a cond(...) is a sequence enclosed in
# parentheses, the opening parentheses is in the same line as the cond(...) and
# the first element of that sequence is put in a new line, then that first
# element will be indented twice from the cond(...). Example:
# return:(
#   cond(maybeTrue, (
#       doAForTrue,
#       doBForTrue),
#     doCForElse)
# )



### Type conversions
# Conversions between what can be considered major data types, e.g. string,
# integer, real, measure etc.

#------------------------------------------------------------------------------
SETG lam_toString:(lambda(input,
# It ensures that the parameter will be returned as a string.
#
# input - IN - the input to ensure that it is a string.
#
# Example usage:
#   lam_toString(3475.32)
  cond(type(input)="string",
    input,
    type(input)="undefined",
    "undefined variable",
    STR input)
))
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
SETG lam_toBoolean:(lambda(input,
# Takes an input and returns a value that can be evaluated to either true or
# false. Since there isn't really a boolean type the result is actually an
# integer that is interpreted as true or false.
# The rules for this are (in this order):
# string --> returns length of string (i.e. non-empty=true, empty=false)
# undefined --> retrns 0 (false)
# measure --> transforms into a number
# time --> evaluates >00:000:00:00:00
# array, map --> length of element (i.e. non-empty=true, empty=false)
# integer, real --> simply returned
# expression --> simply returned, so might lead to an error
# lambda --> simply returned, so might lead to an error
#
# input - IN - the input to transform into a boolean interpretation.
#
# Example usage:
#   lam_toBoolean("")
  cond(type(input)="string",
    LEN input,
    type(input)="undefined",
    0,
    type(input)="measure",
    CMS input,
    type(input)="time",
    (input>00:000:00:00:00),
    type(input)="array",
    LEN input,
    type(input)="map",
    LEN input,
    input)
))
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
SETG lam_toNumber:(lambda(input, (
# Takes an input and uses a regular expression to check if it represents a
# number (real or integer). If it represents a number, then it returns that
# number. Otherwise it returns undefined.
# It works for both the point (.) and the comma (,) as separator and ignores
# preceeding and trailing white-sapces.
# Difference to the FUNCTION version: allows any type of input.
#
# input - IN - the value to translate into a number if possible.
#
# Example usage:
#   lam_toNumber("3475.32")
  cond(type(input) = "integer",
    input,
    type(input) = "real",
    input,
    (set(input, lam_toString(input).trim()),
      cond(regex("^([0-9]+(\\.[0-9]*)?)$", input),
        VAL input,
        regex("^([0-9]+(\\,[0-9]*)?)$", input),
        VAL (replace(input, ",", ".")),
        undefined)))
)))
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION toNumber:global input:string
# Takes a string input and uses a regular expression to check if it represents
# a number (real or integer). If it represents a number, then it returns that
# number. Otherwise it returns undefined.
# It works for both the point (.) and the comma (,) as separator and ignores
# preceeding and trailing white-sapces.
# Difference to the LAMBDA version: input MUST be a string.
#
# input - IN - the string to translate into a number if possible.
#
# Example usage:
#   toNumber("3475.32")
#------------------------------------------------------------------------------
return:(
  set(input, input.trim()),
  cond(regex("^([0-9]+(\\.[0-9]*)?)$", input),
    VAL input,
    regex("^([0-9]+(\\,[0-9]*)?)$", input),
    VAL (replace(input, ",", ".")),
    undefined)
)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION toBestFittingType:global input:string
# Takes a string input and tries to use the best fitting ADOxx data type for
# the value it contains. If there is no other fitting type then it will return
# the string.
# The possible result types are: string, integer, real, measure, time, array
# and map. Expression, lambda and undefined are not supported.
# Note that unlike toNumber a floating-point number MUST use the dot and
# leading zeroes are not allowed for numbers.
#
# input - IN - the string to convert into the best fitting type.
#
# Example usage:
#   toBestFittingType("3475.32")
#------------------------------------------------------------------------------
return:(
  set(trimmedInput, input.trim()),
  cond(
    regex("^(-?0(cm)?)$", trimmedInput)
        OR regex("^(-?[1-9][0-9]*(cm)?)$", trimmedInput)
        OR regex("^(-?[0-9]+[.][0-9]*(cm)?)$", trimmedInput),
    VAL (replace(trimmedInput, ",", ".")),
    regex("^([0-9][0-9]:((36[0-4])|(3[0-5][0-9])|([0-2][0-9][0-9])):((2[0-4])|([0-1][0-9])):[0-5][0-9]:[0-5][0-9])$", trimmedInput),
    VAL trimmedInput,
    try((trimmedInput SUB 0) = "{", 0) AND try((trimmedInput SUB ((LEN trimmedInput)-1)) = "}", 0),
    try(eval(trimmedInput), input),
    input)
)
#------------------------------------------------------------------------------



### Sub-type conversions (same type)
# Conversions between what can be considered sub-types or "dialects" of the
# major types and where the actual type stays the same. For example: string to
# URL-escaped string

#------------------------------------------------------------------------------
FUNCTION escapeStringUriStyle:global s:string a:string
# This functions escapes characters of the first parameter using URI encoding
# style, escaping not allowed characters with %xx where xx is a 2-digit
# hexadecimal value. The second parameter is a string that should contain all
# allowed characters, including all allowed upper-lower cases!
# For alpha-numeric:
# "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
# For alpha-numeric including simple punctuation:
# "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+/*.,"
#
# s - IN - the string whose characters to escape.
# a - IN - a string containing all the characters tht should not be escaped.
#
# Example usage:
#   escapeStringUriStyle("Escape-this:string", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
#       -> returns "Escape%2Dthis%3Astring"
#------------------------------------------------------------------------------
return:(
  set(ret, ""),
  for(i, 0, (LEN s)-1,
    set(ret, ret + cond(search(a, s SUB i, 0)=-1,
        "%" + decToHex(ASC (s SUB i)),
        s SUB i)),
    ret))
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION escapeStringForPath:global s:string
# This function transforms some characters of a string into different ones, so
# that the resulting string is a valid system-path (e.g. no /, no * etc.).
# Two different inputs can produce the same output, since fewer characters are
# allowed in a path than in a string.
# Simply put any not allowed character is changed to a hyphen (-).
#
# s - IN - the string whose charcters to change to valid path characters.
#------------------------------------------------------------------------------
return:(
  replall(
    replall(
      replall(
        replall(
          replall(
            replall(
              replall(
                replall(s,
                  "/", "-"),
                ":", "-"),
              "*", "-"),
            "?", "-"),
          "\"", "-"),
        "<", "-"),
      ">", "-"),
    "|", "-")
)
#------------------------------------------------------------------------------



### Sub-type conversions (change type)
# Conversions between what can be considered sub-types or "dialects" of the
# major types, but which also require a change of the actual type (e.g. integer
# to string). For example: decimal to hexadecimal.

#------------------------------------------------------------------------------
FUNCTION decToHex:global int:integer
# This function transforms a decimal integer value to a hexadecimal value. The
# hexadecimal value is always returned as a string.
#
# int - IN - the integer value to translate into a hexadecimal string value.
#
# Example usage:
#   decToHex(42)
#       -> returns "2A"
#------------------------------------------------------------------------------
return:(
  set(res, abs(int)),
  cond(res>0, (
      set(ret, ""),
      while(res, (
          set(res, res/16),
          set(rem, 16*(res-(INT res))),
          set(ret, cond(rem>9, CHR (INT rem+55), STR rem) + ret),
          set(res, INT res)),
        cond(int<0, "-" + ret, ret))),
    "0")
)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
FUNCTION hexToDec:global hex:string
# This function transforms a hexadecimal integer value provided as a string to
# a decimal integer value. The decimal value is always returned as an integer.
# Note that it doesn't check if the input is correct and it won't throw an
# error if the input contains other characters!
#
# hex - IN - the hexadecimal string value to translate to an integer value.
#
# Example usage:
#   hexToDec("2a")
#       -> returns 42
#------------------------------------------------------------------------------
return:(
  set(res, cond((hex SUB 0) = "-",
      copy(hex, 1, -1),
      hex)),
  set(ret, 0),
  set(lmo, (LEN res)-1),
  for(i, 0, lmo, (
      set(pos, res SUB i),
      set(ret, ret + (cond(search("0123456789", pos, 0)>-1,
          VAL pos,
          (ASC upper(pos))-55)*pow(16, lmo-i)))),
    cond((hex SUB 0) = "-",
      ret*-1,
      ret)))
#------------------------------------------------------------------------------