### Procedure for import a custom PSM preset
PROCEDURE global IMPORT_PSM
{
    # Get current model
    CC "Modeling" GET_ACT_MODEL
    IF (modelid = -1) {
        CC "AdoScript" WARNINGBOX ("Select a generic model to proceed.")
        EXIT
    }

    # Select custom file
    CC "AdoScript" FILE_DIALOG open
        filter1:"JSON Files" type1:"*.json" default-ext:"json" # JSON filter
        #filter2:"XML Files" type2:"*.xml" # XML filter
    SET filePath:(path)
    IF (filePath = "") {
        CC "AdoScript" WARNINGBOX ("No file selected. Process aborted.")
        EXIT
    }

    PIM_TO_PSM filePath:(filePath) modelID:(modelid)
}


### Procedure for select a PSM preset
    ## 1. Get the current open model
    ## 2. Get platform's specifications
    ## 3. Evaluate interrefs
    ## 4. Convert model(s)
PROCEDURE global PRESET_PSM
platform:string # The platform name
{
    ## 1.
    # Get current model
    CC "Modeling" GET_ACT_MODEL
    IF (modelid = -1) {
        CC "AdoScript" WARNINGBOX ("Select a generic model to proceed.")
        EXIT
    }

    ## 2.
    # Get specifications
    SET json:("")
    GET_SPECIFICATIONS platform:(platform) specs:json
    
    ## 3.
    # Get all devices
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:"device"
    SETL refModels:(map())
    SETL refObjs:(map())
    SETL refModels[modelid]:1

    # Get interref for each device
    FOR objid in:(objids) sep:(" ") {
        CC "Core" GET_CLASS_ID objid:(VAL objid)
        CC "Core" GET_ATTR_ID classid:(classid) attrname:"structure"
        CC "Core" GET_ATTR_TYPE	attrid:(attrid)
        IF (attrtype = "INTERREF") {
            CC "Core" GET_INTERREF_COUNT objid:(VAL objid) attrid:(attrid)
            IF (count) {
                CC "Core" GET_OBJ_NAME objid:(VAL objid)
                FOR nIndex from:(0) to:(count-1) {
                    CC "Core" GET_INTERREF objid:(VAL objid) attrid:(attrid) index:(nIndex)
                    IF (type = "objectreference") {
                        IF (type(refObjs[tmodelid]) != "map") {
                            SET refObjs[tmodelid]:(map())
                        }
                        IF (type(refObjs[tmodelid][objname]) != "array") {
                            SETL n:(refObjs[tmodelid])
                            SETL n[objname]:({})
                            SETL refObjs[tmodelid]:(n)
                        }
                        SETL refModels[tmodelid]:1
                        SETL model:(refObjs[tmodelid])
                        SETL arr:(model[objname])
                        SETL n:(aappend(arr, tobjname))
                        SETL model[objname]:(arr)
                        SETL refObjs[tmodelid]:(model)
                    }
                }
            }
        }
    }
    SETL refObjs:({modelid: refObjs})

    ## 4.
    # Convert all models
    SETL targetID:(-1)
    SETL targetModels:(map())
    FOR refId in:(mapKeysTypedList(refModels)) sep:("~") {
        PIM_TO_PSM platform:(platform) specs:(json) modelID:(VAL refId) targetID:targetID
        IF (targetID = -1) {
            FOR targetid in:(mapKeysTypedList(targetModels)) sep:("~") {
                CC "Modeling" CLOSE modelid:(VAL targetid) quiet save
                CC "Core" DELETE_MODEL modelid:(VAL targetid)
            }
            BREAK
        }
        SETL refModels[VAL refId]:(targetID)
        SETL targetModels[targetID]:1
    }

    # Rewrite object's references
    CC "Core" GET_CLASS_ID classname:"device"
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"structure"
    FOR sModId in:(mapKeysTypedList(refObjs)) sep:("~") {
        FOR tModId in:(mapKeysTypedList(refObjs[VAL sModId])) sep:("~") {
            SETL objList:(refObjs[VAL sModId][VAL tModId])
            SETL sourceModId:(refModels[VAL sModId])
            SETL targetModId:(refModels[VAL tModId])
            FOR sObjName in:(mapKeysList(objList)) sep:("~") {
                CC "Core" GET_OBJ_ID modelid:(sourceModId) classid:(classid) objname:(sObjName)
                SETL sObjId:(objid)
                CC "Core" REMOVE_ALL_INTERREFS objid:(objid) attrid:(attrid)
                FOR c from:0 to:(objList[sObjName].length-1) by:1 {
                    CC "Core" GET_OBJ_ID modelid:(targetModId) classid:(classid) objname:(objList[sObjName][c])
                    CC "Core" ADD_INTERREF objid:(sObjId) attrid:(attrid) tobjid:(objid)
                }
            }
        }
    }
}


## Procedure to get platform specifications
PROCEDURE global GET_SPECIFICATIONS 
platform:string # Platform's name
specs:reference # Platform's specifications (output)
{
    ## 1.
    # Select right file
    SETL filePath:(-1)
    IF (platform = "ThingsBoard") {
        SETL filePath:("db:\\thingsboard.json")
    } ELSIF (platform = "Losant") {
        SETL filePath:("db:\\losant.json")
    } ELSIF (platform = "Azure") {
        SETL filePath:("db:\\azure.json")
    }

    # Read JSON file
    CC "AdoScript" FREAD file:(filePath)
    IF (ecode != 0) {
        CC "AdoScript" ERRORBOX ("The file is not readable!") ok
        EXIT
    }

    ## 2.
    # Convert file content to JSON
    SETL specs:(fromJson(text))
}


### Procedure to set object specifications
PROCEDURE global SET_SPECIFICATIONS
    objID:string # Object's id
    specs:map # Platform's specifications
{
    # Get object's classname
    CC "Core" GET_CLASS_ID objid:(VAL objID)
    CC "Core" GET_CLASS_NAME classid:(classid)
    SETL class:(specs[classname])
    
    IF (type(class) = "map") {
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
        IF (attrid != -1 AND type(class["specs"]) = "map") {
            SETL attrs:(mapKeysArray(class["specs"]))
            FOR j from:0 to:(attrs.length-1) {
                # Add attribute to specification table
                SETL attrClass:(class["specs"][attrs[j]])
                CC "Core" ADD_REC_ROW objid:(VAL objID) attrid:(attrid)
                CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:(attrs[j])
                IF (type(attrClass) = "map") {
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:(attrClass["type"])
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:(attrClass["description"])
                }
                IF (ecode != 0) {
                    CC "AdoScript" ERRORBOX ("Error adding a row to attribute \"" + (attrs[j]) + "\"")
                    EXIT
                }
            }
        }
        # Get all outcoming connectors
        IF (type(class["config"]) != "undefined") {
            CC "Core" GET_CONNECTORS objid:(VAL objID) out
            FOR connector in:(objids) {
                # Add connector types
                SETL types:(lam_toList(class["output"], "~"))
                CC "Core" SET_ATTR_VAL objid:(VAL connector) attrname:"available_types" val:(types)
            }
        }
    } ELSIF (type(class) = "array") {
        SETL types:(mapKeysList(class[0]))
        CC "Core" SET_ATTR_VAL objid:(VAL objID) attrname:("available_types") val:(types)
    }
}


### Procedure for transforming a PIM model into a PSM model
    ## 1. Create a new model
    ## 2. Get all model's elements
    ## 3. Copy model's elements
    ## 4. Paste elements in the new model
    ## 5. Open the new PSM model
    ## 6. Add PSM attributes
    ## 7. Save the new PSM model
PROCEDURE global PIM_TO_PSM
    platform:string # Platform's name
    specs:map # Platform's specifications
    modelID:integer # PIM model's id
    targetID:reference # PSM model's id (output)
{
    ## 1.
    # Load selected model
    CC "Core" LOAD_MODEL modelid:(modelID)

    # Select a target model group
    CC "CoreUI" MODEL_SELECT_BOX without-models mgroup-sel title:"Select at least one target modelgroup"
    IF (endbutton != "ok") {
        SETL targetID:-1
        EXIT
    }
    SETL a_mgroupids:(mgroupids)

    # Get actual model's name
    CC "Core" GET_MODEL_BASENAME modelid:(modelID)
    SETL a_mn:(basename)

    # Get actual model's type
    CC "Core" GET_MODEL_MODELTYPE modelid:(modelID)
    SETL a_mt:(modeltype)
    SETL a_dstmodelid:0
    SETL ecode:1

    WHILE (ecode != 0) {
        # Let the user enter a new modelname
        CC "AdoScript" EDITFIELD title:("New model for " + a_mn) caption:("~Modelname:")
        IF (ecode != 0) {
            SETL targetID:-1
            EXIT
        }
        SETL a_name:(text)
        CC "Core" CREATE_MODEL modeltype:(a_mt) modelname:(a_name) version:"" mgroups:(a_mgroupids)
        
        IF (ecode = 0) {
            SETL a_dstmodelid:(modelid)
        } ELSIF (ecode = 40) {
            CC "AdoScript" ERRORBOX ("A model with the same name already exists") ok
        } ELSE {
            CC "AdoScript" ERRORBOX ("An error occured creating the new model: " + STR errtext) ok
        }
    }

    ## 2.
    # Get all objects
    CC "Core" GET_ALL_OBJS modelid:(modelID)
    SETL a_instids:(objids)

    # Get all connectors
    CC "Core" GET_ALL_CONNECTORS modelid:(modelID)
    SETL a_relinstids:(objids)

    ## 3.
    # Copy all elements
    CC "Core" CREATE_COPYBUFFER index:0
    CC "Core" FILL_COPYBUFFER index:0 instids:(a_instids) relinstids:(a_relinstids)

    ## 4.
    # Paste elements in the new model
    CC "Core" PASTE_COPYBUFFER index:0 modelid:(a_dstmodelid)
    SETL g_acreatedinstids:(instids)
    SETL g_acreatedrelinstids:(relinstids)

    # Delete buffer
    CC "Core" DELETE_COPYBUFFER index:0
    
    ## 5.
    # Open new model in modeling
    CC "Modeling" OPEN modelids:(STR a_dstmodelid)
    CC "Modeling" SET_VIEW_MODE modelid:(a_dstmodelid) mode-name:"PSM"
    CC "Core" SET_ATTR_VAL objid:(a_dstmodelid) attrname:"Model Type" val:("PSM")
    CC "Core" SET_ATTR_VAL objid:(a_dstmodelid) attrname:"Platform" val:(platform)

    ## 6.
    # Get all objects from new model
    CC "Core" GET_ALL_OBJS modelid:(a_dstmodelid)
    IF (ecode != 0) {
        CC "AdoScript" ERRORBOX "Something went very wrong here (e.g. we passed the wrong model id)!\n"
        CC "Modeling" CLOSE modelid:(a_dstmodelid) quiet
        CC "Core" DELETE_MODEL modelid:(a_dstmodelid)
        SETL targetID:-1
        EXIT
    }

    # Add PSM attributes to objects
    FOR obj in:(objids) {
        SET_SPECIFICATIONS objID:(obj) specs:(specs)
    }

    ## 7.
    # Save and discard model
    CC "Core" SAVE_MODEL modelid:(a_dstmodelid)
    SETL targetID:(a_dstmodelid)
    #CC "Core" DISCARD_MODEL modelid:(a_dstmodelid)
}