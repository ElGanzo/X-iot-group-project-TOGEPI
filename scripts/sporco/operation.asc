# Get all devices class inside actual model
CC "Modeling" GET_ACT_MODEL
SETL modelID:(modelid)
CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:"Device"
SETL devices:(map())
FOR deviceId in:(objids) {
    # get all operations defined inside each device table
    CC "Core" GET_ATTR_VAL objid:(VAL deviceId) attrname:("Name")
    SETL devices[deviceId]:({
        "Name": val,
        "Operations": {}
    })
    CC "Core" GET_CLASS_ID objid:(VAL deviceId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("Operations")
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(VAL deviceId) attrid:(attrid)
    SETL device:(devices[deviceId])
    SETL operations:({})
    # Get operations specifications
    FOR row in:(rowids) {
        SETL operation:(map())
        CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Operation")
        SETL operation["Name"]:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Description")
        SETL operation["Description"]:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Required")
        SETL operation["Required"]:(val)
        SETL n:(aappend(operations, operation))
    }
    SETL device["Operations"]:(operations)
    SETL devices[deviceId]:(device)
}
CC "Core" CREATE_COPYBUFFER index:0
CC "Core" FILL_COPYBUFFER index:0 instids:(objids) relinstids:("")
CC "AdoScript" INFOBOX (STR devices)

# Create new model

# Select a target model group
CC "CoreUI" MODEL_SELECT_BOX without-models mgroup-sel title:"Select at least one target modelgroup"
IF (endbutton != "ok") {
SETL targetID:-1
EXIT
}

SETL a_mgroupids:(mgroupids)

# Get actual model's name
CC "Core" GET_MODEL_BASENAME modelid:(modelid)
SETL a_mn:(basename)

# Get actual model's type (maybe useless)
CC "Core" GET_MODEL_MODELTYPE modelid:(modelid)
SETL a_mt:(modeltype)
SETL a_dstmodelid:0
SETL ecode:1

WHILE (ecode != 0) {
    # Let the user enter a new modelname
    CC "AdoScript" EDITFIELD title:("New model for " + a_mn) caption:("~Modelname:")
    IF (ecode != 0) {
        SETL targetID:-1
        EXIT
    }
    SETL a_name:(text)
    CC "Core" CREATE_MODEL modeltype:("Feature Operation Model") modelname:(a_name) version:"" mgroups:(a_mgroupids)
    IF (ecode = 0) {
        SETL a_dstmodelid:(modelid)
    } ELSIF (ecode = 40) {
        CC "AdoScript" ERRORBOX ("A model with the same name already exists") ok
    } ELSE {
        CC "AdoScript" ERRORBOX ("An error occured creating the new model: " + STR errtext) ok
    }
}

CC "Core" GET_CLASS_ID classname:("Device")
SETL deviceClassId:(classid)
CC "Core" GET_CLASS_ID classname:("Operation")
SETL operationClassId:(classid)
CC "Core" PASTE_COPYBUFFER index:0 modelid:(a_dstmodelid)
CC "Core" DELETE_COPYBUFFER index:0

FOR deviceId in:(mapKeysList(devices)) sep:("~") {
    SETL device:(devices[deviceId])
    SETL name:(device["Name"])
    SETL operations:(device["Operations"])
    SETL n:(operations.length)
    CC "Core" GET_CLASS_NAME objid:(deviceId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("Component")
    CC "Core" GET_OBJ_ID modelid:(a_dstmodelid) classid:(deviceClassId) objname:(name)
    CC "Core" ADD_INTERREF objid:(VAL deviceId) attrid:(attrid) tobjid:(objid)
    FOR i from:0 to:(n-1) {
        SETL name:(operations[i]["Name"])
        SETL description:(operations[i]["Description"])
        SETL rand:(name + STR randomDiscreteUniformDist(10000, 99999))
        CC "Core" CREATE_OBJ modelid:(a_dstmodelid) classid:(operationClassId) objname:(rand)
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:"Operation Name" val:(name)
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:"Description" val:(description)
    }
}

# reference tra i component per il psm ( il device punta alla reference del pim invece deve puntare al psm )
# bisogna generare il psm di tutti i modelli in automatico