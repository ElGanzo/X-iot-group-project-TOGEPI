### Procedure to export PSM to specific platform
    ## 1. Get the current open model
    ## 2. Select path to export files
    ## 3. Execute platform specific procedure
PROCEDURE global PSM_TO_FILE
{
    ## 1.
    # Get current model
    CC "Modeling" GET_ACT_MODEL
    SET modelID:(modelid)
    IF (modelID = -1) {
        CC "AdoScript" WARNINGBOX ("Select a PSM model to proceed.")
        EXIT
    }
    # Check if current model is a PSM
    CC "Core" GET_ATTR_VAL objid:(modelID) attrname:("Model Type")
    IF (val != "PSM") {
        CC "AdoScript" WARNINGBOX ("Select a PSM model to proceed.")
        EXIT
    }

    ## 2.
    # Select the path to save files
    CC "AdoScript" DIRECTORY_DIALOG
    IF (endbutton != "ok") {
        EXIT
    }

    ## 3.
    # Get platform name
    CC "Core" GET_ATTR_VAL objid:(modelID) attrname:("Platform")
    SET platform:(val)
    # Choose export function
    IF (platform = "ThingsBoard") {
        THINGSBOARD modelID:(modelID) path:(path)
    } ELSIF (platform = "Losant") {
        LOSANT modelID:(modelID) path:(path)
    } ELSIF (platform = "Azure") {
        AZURE modelID:(modelID) path:(path)
    } ELSE {
        CC "AdoScript" WARNINGBOX ("Platform not supported.")
        EXIT
    }
}

PROCEDURE global AZURE 
modelID:integer # Source model's id
path:string # Path where save files
{
    CC "AdoScript" WARNINGBOX("Please ensure that there are no accented letters on devices, device's operations or attributes names.\nThey may cause import failure on Azure!")

    # Application name and device template name are used for the id buildings
    SET applicationURL: ""

    # Take all the model devices
    GET_APP_URL_NAME applicationURL:applicationURL

    CC "Modeling" GET_VIEW_MODE modelid:(modelID)
    CC "Core" LOAD_MODEL modelid:(modelID)

    # for each device return a json file with the device's capabilities
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("device")
    
    SET oldContents: (map()) 

    # iterate over the devices, for each device create a <deviceName>_capabilities
    FOR obj in:(objids) {
        
        # The json file starts with the [] so we need to write first an array of objects (in this case, with only one "primary"-object)
        SET container:({})

        SETL primaryObject:(map()) # primaryObject: the only global object inserted into the json file, the only element of the "container" array 

        SET contents:({})   # array "contents" with many "capability" objects as the number of the device capabilities' 

        # Get the device's name
        CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("name")

        SET deviceName:(replall(val, " ", "")) # delete every space in between the device's name
        
        # @id & @type
        SETL primaryObject["@id"]:("dtmi:"+applicationURL+":"+deviceName+"_"+"123"+";"+"1") # fante cavalle e re
        SETL primaryObject["@type"]:"Interface"

        # fill "contents" array
        SET_CAPABILITIES_COMMANDS contents:contents device:device
        SET_CAPABILITIES_FROM_ATTRIBUTES contents:contents device:device

        SETL primaryObject["contents"]:(contents)
        
        # displayName
        SETL displayName:(map())
        SETL displayName["en"]:(deviceName)
        SETL primaryObject["displayName"]:(displayName)

        # context
        SET context:({"dtmi:iotcentral:context;2","dtmi:dtdl:context;2"}) # version 2 by default: last number means version        
        SETL primaryObject["@context"]:(context)

        SET filePath:(path + "\\"+deviceName+"_capabilities.json")

        # everything inside container (Azure json file format...)
        SET container:({primaryObject})

        #  final instructions
        SETL primaryObject:(lam_toJson(container))
        CC "AdoScript" FWRITE file:(filePath) text:(primaryObject)
    }    
}


PROCEDURE global SET_CAPABILITIES_FROM_ATTRIBUTES 
contents:reference
device:reference
{
    # Get all the relation classes "Attribute"
    CC "Core" GET_CONNECTORS objid:(VAL obj) out
    # Get all the device operations
    FOR connector in:(objids) {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connector)
        CC "Core" GET_CLASS_ID objid:(toobjid)
        CC "Core" GET_CLASS_NAME classid:(classid)
        IF( classname = "attribute") {
            # useful attributes on Device Operation class
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("name")
            SETL attributeName:(replall(val, " ", ""))
            SETL newCapability:(map())
            SETL newCapability["@id"]:("dtmi:"+applicationURL+":"+deviceName+"_123:"+attributeName+";1")
            SETL newCapability["@type"]:({})
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("description")
            SETL description:(map())
            SETL description["en"]:(val)

            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("psm_type")
            SETL capabilityType:({"Telemetry", "NumberValue", val})
            SETL newCapability["@type"]:(capabilityType)

            SETL newCapability["description"]:(description)
            SETL newCapability["name"]:(attributeName)

            SET_CAPABILITY_SCHEMA_AND_UNIT capability:newCapability attribute:toobjid
                            
            SET nothing:(aappend(contents, newCapability))
        }
    } 
}

PROCEDURE global SET_CAPABILITY_SCHEMA_AND_UNIT
capability:reference
attribute:reference
{
    CC "Core" GET_ATTR_VAL objid:(attribute) attrname:("psm_type")
    # Get specification attributes
    IF (val = "Acceleration" OR val = "Distance") {
        SET capability["schema"]:"integer"
        # "Value" coloumn of specification
        CC "Core" GET_CLASS_ID objid:(attribute)
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
        CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(attribute) attrid:(attrid)
        FOR row in:(rowids) {
            CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Value")
        }
        SET capability["maxValue"]:(val)
    } ELSIF ( val = "Humidity") {
        SET capability["schema"]:"double"
    } ELSIF ( val = "Area" OR val = "Force" OR val = "Mass" OR val = "Temperature" OR val = "Pressure") {
        SET capability["schema"]:"double"
        # "Value" coloumn of specification
        CC "Core" GET_CLASS_ID objid:(attribute)
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
        CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(attribute) attrid:(attrid)
        FOR row in:(rowids) {
            CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Value")
        }
        SET capability["unit"]:(lower(val))
    }
}


# device capability of type "Command" informations are inside "Device Operation" classes
PROCEDURE global SET_CAPABILITIES_COMMANDS
contents:reference
device:reference
{
    # Get all the relation classes "hasOperation"
    CC "Core" GET_CONNECTORS objid:(VAL obj) out
    # Get all the device operations
    FOR connector in:(objids) {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connector)
        CC "Core" GET_CLASS_ID objid:(toobjid)
        CC "Core" GET_CLASS_NAME classid:(classid)
        IF( classname = "Device Operation") {
            # useful attributes on Device Operation class
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Name")
            SETL commandName:(replall(val, " ", ""))
            SETL newCapability:(map())
            SETL newCapability["@id"]:("dtmi:"+applicationURL+":"+deviceName+"_123:"+commandName+";1")
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("description")
            SETL description:(map())
            SETL description["en"]:(val)

            SETL newCapability["@type"]:("Command")
            SETL newCapability["commandType"]:("synchronous")
            SETL newCapability["description"]:(description)
            SETL newCapability["name"]:(commandName)
            
            SET nothing:(aappend(contents, newCapability))
        }
    } 
}

# Get the application url (only the "central" name, ex: https://"myazureapplication".azureiotcentral.com/) 
PROCEDURE global GET_APP_URL_NAME
applicationURL:reference
{
    CC "AdoScript" EDITFIELD title:"Azure's Application URL" caption:"Enter Azure's Application URL:" text:"myazureapplication"
    IF (ecode != 0) {# if "ok" button is not clicked, something went wrong
        EXIT
    }
    SET applicationURL:(text)
}

### ThingsBoard export function
PROCEDURE global THINGSBOARD
    modelID:integer # Source model's id
    path:string # Path where save files
{
    ## 1.
    # Get specifications
    SET convJson:("")
    GET_SPECIFICATIONS platform:("ThingsBoard") specs:convJson

    ## 2.
    # Set application name
    CC "AdoScript" EDITFIELD title:"Enter application name" caption:"Application ~name:" text:"Default"
    IF (ecode = 1) {
        EXIT
    }
    SET path:(path + "\\" + text)
    CC "AdoScript" DIR_CREATE path:(path)

    ## 3.
    # Get the modeltype of the model
    CC "Core" GET_MODEL_MODELTYPE modelid:(modelID)

    IF (modeltype = "IoT Scenario") {
        SET device_profile:({
            "default": 0,
            "defaultQueueName": "",
            "description": "",
            "name": "",
            "profileData": {
                "configuration": {
                    "type": "DEFAULT"
                },
                "provisionConfiguration": {
                    "type": "DISABLED"
                },
                "transportConfiguration": {
                    "deviceAttributesTopic": "v1/devices/me/attributes",
                    "deviceTelemetryTopic": "v1/devices/me/telemetry",
                    "transportPayloadTypeConfiguration": {
                        "transportPayloadType": "JSON"
                    },
                    "type": "MQTT"
                }
            },
            "provisionType": "DISABLED",
            "transportType": "MQTT",
            "type": "DEFAULT"
        })
        SET dashboard:({
            "name": "Dashboard",
            "title": "Dashboard",
            "configuration": {
                "description": "",
                "widgets": map()
            },
            "states": {
                "default": {
                    "name": "Dashboard",
                    "layouts": {
                        "main": {
                            "widgets": {
                            },
                            "gridSettings": {
                                "backgroundColor": "#eeeeee",
                                "columns": 24,
                                "margin": 10,
                                "backgroundSizeMode": "100%"
                            }
                        }
                    }
                }
            },
            "timewindow": {
                "displayValue": "",
                "selectedTab": 0,
                "realtime": {
                    "realtimeType": 0,
                    "interval": 1000,
                    "timewindowMs": 60000,
                    "quickInterval": "CURRENT_DAY"
                },
                "history": {
                    "historyType": 0,
                    "interval": 1000,
                    "timewindowMs": 60000,
                    "fixedTimewindow": {
                        "startTimeMs": 1647250508451,
                        "endTimeMs": 1647336908451
                    },
                    "quickInterval": "CURRENT_DAY"
                },
                "aggregation": {
                    "type": "AVG",
                    "limit": 2500
                }
            }
        })

        SET attributes:(map())
        SET objAttributes:(map())

        # Get all attributes
        CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("attribute")
        FOR obj in:(objids) {
            CC "Core" GET_CONNECTORS objid:(VAL obj)
            IF (objids != "") {
                CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("name")
                SET attributes[val]:("")
                FOR connector in:(objids) {
                    CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connector)
                    IF (type(objAttributes[fromobjid]) != "map") {
                        SET objAttributes[fromobjid]:(map())
                    }
                    SET map:(objAttributes[fromobjid])
                    SET key:(val)
                    CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("value")
                    SET map[key]:(val)
                    SET objAttributes[fromobjid]:(map)
                }
            }
        }

        # Get all locations
        CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("location")
        FOR obj in:(objids) {
            CC "Core" GET_CONNECTORS objid:(VAL obj)
            IF (objids != "") {
                SET attributes["lat"]:("")
                SET attributes["lon"]:("")
                FOR connector in:(objids) {
                    CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connector)
                    IF (type(objAttributes[fromobjid]) != "map") {
                        SET objAttributes[fromobjid]:(map())
                    }
                    SET map:(objAttributes[fromobjid])
                    CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("lat")
                    SET map["lat"]:(val)
                    CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("lon")
                    SET map["lon"]:(val)
                    SET objAttributes[fromobjid]:(map)
                }
            }
        }

        # Get all device profiles
        CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("service")
        FOR obj in:(objids) {
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("name")
            SET device_profile["name"]:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("description")
            SET device_profile["description"]:(val)
            CC "AdoScript" FWRITE file:(path + "\\device_profile_" + obj + ".json") text:(STR device_profile)
        }

        # Get all devices
        CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("device")
        SET csv:("")
        SET attributes["name"]:("")
        SET attributes["description"]:("")
        FOR obj in:(objids) {
            SET objMap:(attributes)
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("name")
            SET objMap["name"]:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("description")
            SET objMap["description"]:(val)
            CC "Core" GET_CLASS_ID objid:(VAL obj)
            CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
            CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(VAL obj) attrid:(attrid)
            # Get specification attributes
            FOR row in:(rowids) {
                CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Attribute")
                SET key:(val)
                CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Value")
                SET objMap[key]:(val)
            }
            # Get other attributes (attribute & location)
            IF (type(objAttributes[VAL obj]) = "map") {
                SET attrs:(objAttributes[VAL obj])
                FOR attr in:(replall(mapKeysList(objAttributes[VAL obj]), "~", " ")) {
                    SET objMap[attr]:(attrs[attr])
                }
            }
            # Add device line on csv
            SET columns:(mapKeysArray(objMap))
            FOR c from:0 to:(objMap.length-1) by:1 {
                IF (c = 0) {
                    SET csv:(csv + "\n" + objMap[columns[c]])
                } ELSE {
                    SET csv:(csv + "," + objMap[columns[c]])
                }
            }
        }
        SET columns:(replall(mapKeysList(objMap), "~", ","))
        SET csv:(columns + csv)
        CC "AdoScript" FWRITE file:(path + "\\devices.csv") text:(csv)

        # Get all systems
        CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("system")
        SET csv:("")
        FOR obj in:(objids) {
            SET objMap:(attributes)
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("name")
            SET objMap["name"]:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("description")
            SET objMap["description"]:(val)
            CC "Core" GET_CLASS_ID objid:(VAL obj)
            CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
            CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(VAL obj) attrid:(attrid)
            # Get specification attributes
            FOR row in:(rowids) {
                CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Attribute")
                SET key:(val)
                CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Value")
                SET objMap[key]:(val)
            }
            # Get other attributes (attribute & location)
            IF (type(objAttributes[VAL obj]) = "map") {
                SET attrs:(objAttributes[VAL obj])
                FOR attr in:(replall(mapKeysList(objAttributes[VAL obj]), "~", " ")) {
                    SET objMap[attr]:(attrs[attr])
                }
            }
            # Add asset line on csv
            SET columns:(mapKeysArray(objMap))
            FOR c from:0 to: (objMap.length-1) by:1 {
                IF (c = 0) {
                    SET csv:(csv + "\n" + objMap[columns[c]])
                } ELSE {
                    SET csv:(csv + "," + objMap[columns[c]])
                }
            }
        }
        SET columns:(replall(mapKeysList(objMap), "~", ","))
        SET csv:(columns + csv)
        CC "AdoScript" FWRITE file:(path + "\\assets.csv") text:(csv)

        # Get all widgets
        CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("widget")
        SET widgetId:(randomDiscreteUniformDist(10000000, 90000000))
        FOR obj in:(objids) {
            SET class:(map())
            CLASS_PSM specs:(convJson) objID:(VAL obj) class:class
            IF (NOT class.empty) {
                SET id:(STR widgetId)
                SET widgetId:(widgetId + 1)
                SET widget:(class["config"])
                SET widget["id"]:(id)
                SET widgetConfig:(widget["config"])
                CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("name")
                SET widgetConfig["title"]:(val)
                CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("description")
                SET widget["description"]:(val)
                SET widget["config"]:(widgetConfig)
                SET configuration:(dashboard["configuration"])
                SET widgets:(configuration["widgets"])
                SET widgets[id]:(widget)
                SET configuration["widgets"]:(widgets)
                SET dashboard["configuration"]:(configuration)
            }
        }
        CC "AdoScript" FWRITE file:(path + "\\dashboard.json") text:(lam_toJson(dashboard))
        
    } ELSIF (modeltype = "IoT Logic") {
        # Set rule chain name
        CC "AdoScript" EDITFIELD title:"Enter rule chain name" caption:"Rule chain ~name:" text:"Default"
        IF (ecode = 1) {
            EXIT
        }
        SET rulechainName:(text)
        SET rulechain:({
            "ruleChain": {
                "additionalInfo": {
                    "description": ""
                },
                "name": rulechainName,
                "type": "CORE"
            },
            "metadata": {
                "nodes": {},
                "connections": {}
            }
        })
        SET nodeIndex:(map())

        # Get all logic nodes
        CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("node")
        # Add nodes to rule chain file
        FOR obj in:(objids) {
            SET class:(map())
            CLASS_PSM specs:(convJson) objID:(VAL obj) class:class
            IF (NOT class.empty) {
                SET metadata:(rulechain["metadata"])
                SET nodes:(metadata["nodes"])
                SET node:(map())
                SET info:(map())
                CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("name")
                SET node["name"]:(val)
                CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("description")
                SET info["description"]:(val)
                CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:"Position"
                LEO parse:(val) get-tmm-value:x:"x" get-tmm-value:y:"y"
                SET info["layoutX"]:((CMS x)*50+100)
                SET info["layoutY"]:((CMS y)*50)
                SET node["additionalInfo"]:(info)
                SET node["type"]:(class["config"]["type"])
                SET n:(aappend(nodes, node))
                SET metadata["nodes"]:(nodes)
                SET rulechain["metadata"]:(metadata)
                SET nodeIndex[VAL obj]:(nodeIndex.length)
            }
        }

        # Get all logic connectors
        CC "Core" GET_ALL_CONNECTORS modelid:(modelID)
        # Add connectors to rule chain file
        FOR obj in:(objids) {
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("psm_type")
            CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL obj)
            IF (val != "" AND type(nodeIndex[toobjid]) != "undefined" AND type(nodeIndex[fromobjid]) != "undefined") {
                SET connection:(map())
                SET connection["type"]:(val)
                SET connection["toIndex"]:(nodeIndex[toobjid])
                SET connection["fromIndex"]:(nodeIndex[fromobjid])
                SET metadata:(rulechain["metadata"])
                SET connections:(metadata["connections"])
                SET n:(aappend(connections, connection))
                SET metadata["connections"]:(connections)
                SET rulechain["metadata"]:(metadata)
            }
        }

        SET json:(lam_toJson(rulechain))
        CC "AdoScript" FWRITE file:(path + "\\" + rulechainName + ".json") text:(lam_toJson(rulechain))
    }
}


### Losant export function
PROCEDURE global LOSANT
    modelID:integer # Source model's id
    path:string # Path where save files
{
    ## 1.
    # Get specifications
    SET convJson:("")
    GET_SPECIFICATIONS platform:("Losant") specs:convJson

    ## 2.
    # Set application name
    CC "AdoScript" EDITFIELD title:"Enter application name" caption:"Application ~name:" text:"Default"
    IF (ecode = 1) {
        EXIT
    }
    SET applicationName:(text)

    ## 3.
    # Get the modeltype of the model
    CC "Core" GET_MODEL_MODELTYPE modelid:(modelID)

    IF (modeltype = "IoT Scenario") {
        SET applicationId:("~exportplaceholderid-application-demo-0~")
        SET application:({
            "resourceType": "Application",
            "resources": {
                {
                    "blobUrlTTL": 86400,
                    "description": "",
                    "filesPath": "./files",
                    "globals": {},
                    "id": applicationId,
                    "name": "",
                    "readmePath": "./README.md"
                }
            },
            "version": 1
        })
        SET dashboard:({
            "resourceType": "Dashboard",
            "resources": {
                {
                    "blocks": {},
                    "contextConfiguration": {},
                    "defaultTheme": "light",
                    "description": "",
                    "id": "~exportplaceholderid-dashboard-dashboard-0~",
                    "name": "Dashboard",
                    "refreshRate": 60
                }
            },
            "version": 1
        })
        SET devices:({
            "resourceType": "DeviceTree",
            "resources": {},
            "version": 1
        })

        SET appDetails:(application["resources"])
        SET appResources:(appDetails[0])
        SET appResources["name"]:(applicationName)
        SET appResources["description"]:(applicationName + " application")
        SET appDetails[0]:(appResources)
        SET application["resources"]:(appDetails)

        # Get all systems and devices
        CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("system")
        SET systemids:(objids)
        CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("device")
        SET systemids:(systemids + " " + objids)
        SET struct:(map())
        SET resources:({})
        FOR systemid in:(systemids) {
            SET check:(0)
            CC "Core" GET_CONNECTORS objid:(VAL systemid) in
            FOR connid in:(objids) {
                CC "Core" GET_CLASS_ID relation objid:(VAL connid)
                CC "Core" GET_CLASS_NAME classid:(classid)
                IF (classname = "subsystem" OR classname = "hasDevice") {
                    SET check:(1)
                }
            }
            IF (check = 0) {
                LOSANT_DEVICES objID:(VAL systemid) struct:struct
                IF (struct.empty = 0) {
                    SET n:(aappend(resources, struct))
                }
            }
        }
        SET devices["resources"]:(resources)

        # Get all widgets
        CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("widget")
        SET dashboardResources:(dashboard["resources"])
        SET resources:(dashboardResources[0])
        SET height:(0)
        FOR widgetid in:(objids) {
            SET class:(map())
            CLASS_PSM specs:(convJson) objID:(VAL widgetid) class:class
            IF (NOT class.empty) {
                # Get widget's information
                SET widgets:(resources["blocks"])
                SET widget:(class["config"])
                SET widget["id"]:(widgetid)
                SET widget["applicationId"]:(applicationId)
                SET widget["startY"]:(height)
                CC "Core" GET_ATTR_VAL objid:(VAL widgetid) attrname:("name")
                SET widget["title"]:(val)
                SET n:(aappend(widgets, widget))
                SET resources["blocks"]:(widgets)
                SET dashboardResources[0]:(resources)
                SET dashboard["resources"]:(dashboardResources)
                SET height:(height + widget["height"])
            }
        }

        # Create application's files
        SET path:(path + "\\" + applicationName)
        CC "AdoScript" DIR_CREATE path:(path)
        CC "AdoScript" FWRITE file:(path + "\\application.json") text:(lam_toJson(application))
        CC "AdoScript" FWRITE file:(path + "\\devices.json") text:(lam_toJson(devices))
        SET path:(path + "\\dashboards")
        CC "AdoScript" DIR_CREATE path:(path)
        CC "AdoScript" FWRITE file:(path + "\\dashboard.json") text:(lam_toJson(dashboard))
    } ELSIF (modeltype = "IoT Logic") {
        # Set workflow name
        CC "AdoScript" EDITFIELD title:"Enter workflow name" caption:"Workflow ~name:" text:"Default"
        IF (ecode = 1) {
            EXIT
        }
        SET workflowName:(text)
        SET workflow:({
            "resourceType": "Flow",
            "resources": {
                {
                    "description": "",
                    "flowClass": "cloud",
                    "globals": {},
                    "id": "~exportplaceholderid-flow-workflow-0~",
                    "name": workflowName,
                    "nodes": {},
                    "triggers": {}
                }
            },
            "version": 1
        })
        
        # Get all logic nodes
        CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("node")
        SET workflowResources:(workflow["resources"])
        SET resources:(workflowResources[0])
        # Add nodes to rule chain file
        FOR obj in:(objids) {
            SET class:(map())
            CLASS_PSM specs:(convJson) objID:(VAL obj) class:class
            IF (NOT class.empty) {
                # Get node's information
                SET triggers:(resources["triggers"])
                SET nodes:(resources["nodes"])
                SET node:(class["config"])
                SET meta:(node["meta"])
                CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("name")
                SET meta["label"]:(val)
                CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("description")
                SET meta["description"]:(val)
                CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("Position")
                LEO parse:(val) get-tmm-value:x:"x" get-tmm-value:y:"y"
                SET meta["x"]:((CMS x)*40)
                SET meta["y"]:((CMS y)*50)
                
                # Get node's out connectors
                IF (type(class["output"]) = "array") {
                    SET outputs:(map())
                    FOR i from:0 to:(class["output"].length-1) {
                        SET outputs[class["output"][i]]:({}) 
                    }
                    CC "Core" GET_CONNECTORS objid:(VAL obj) out
                    SET connids:(objids)
                    FOR connid in:(connids) {
                        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
                        CC "Core" GET_ATTR_VAL objid:(VAL connid) attrname:("psm_type")
                        SET conntype:(val)
                        SET outputClass:("")
                        CLASS_PSM specs:(convJson) objID:(toobjid) class:outputClass
                        IF (conntype != "" AND NOT outputClass.empty) {
                            SET output:(outputs[conntype])
                            SET n:(aappend(output, STR toobjid))
                            SET outputs[conntype]:(output)
                        }
                    }
                    SET outputIds:(node["outputIds"])
                    SET outKeys:(mapKeysArray(outputs))
                    FOR i from:0 to:(outKeys.length-1) {
                        SET n:(aappend(outputIds, outputs[outKeys[i]]))
                    }
                    SET node["outputIds"]:(outputIds)
                }
                IF (node["meta"]["category"] = "trigger") {
                    SET meta["uiId"]:(obj)
                    SET node["meta"]:(meta)
                    SET n:(aappend(triggers, node))
                    SET resources["triggers"]:(triggers)
                } ELSE {
                    SET node["id"]:(obj)
                    SET node["meta"]:(meta)
                    SET n:(aappend(nodes, node))
                    SET resources["nodes"]:(nodes)
                }
            }
            SET workflowResources[0]:(resources)
            SET workflow["resources"]:(workflowResources)
        }

        SET path:(path + "\\" + applicationName)
        CC "AdoScript" DIR_CREATE path:(path)
        SET path:(path + "\\workflows")
        CC "AdoScript" DIR_CREATE path:(path)
        CC "AdoScript" FWRITE file:(path + "\\" + workflowName + ".json") text:(lam_toJson(workflow))
    }
}

PROCEDURE global LOSANT_DEVICES 
    objID:integer
    struct:reference
{
    SETL device:(map())
    SETL children:({})
    SETL attributes:({})
    SETL tags:({})
    SETL attributeTags:(map())
    CC "Core" GET_CLASS_ID objid:(objID)
    CC "Core" GET_CLASS_NAME classid:(classid)

    IF (classname = "system") {
        CC "Core" GET_ATTR_VAL objid:(objID) attrname:("name")
        SETL name:(val)
        IF (name != "") {
            SETL device["id"]:("~exportplaceholderid-system-name-" + STR objID + "~")
            SETL device["name"]:(name)
            SETL device["deviceClass"]:("system")
            CC "Core" GET_CONNECTORS objid:(objID) out
            SETL connids:(objids)
            FOR connid in:(connids) {
                SETL obj:(map())
                CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
                LOSANT_DEVICES objID:(toobjid) struct:obj
                IF (obj.empty = 0) {
                    CC "Core" GET_CLASS_ID relation objid:(VAL connid)
                    CC "Core" GET_CLASS_NAME classid:(classid)
                    IF (classname = "hasDevice" OR classname = "subsystem") {
                        SET n:(aappend(children, obj))
                    } ELSIF (classname = "hasAttribute" OR classname = "hasLocation" OR classname = "hasService") {
                        SET n:(aappend(attributes, obj))
                    }
                }
            }
            SETL device["children"]:(children)
            SETL device["attributes"]:(attributes)
            SETL device["tags"]:(tags)
        }
    } ELSIF (classname = "device") {
        CC "Core" GET_ATTR_VAL objid:(objID) attrname:("name")
        SETL name:(val)
        CC "Core" GET_ATTR_VAL objid:(objID) attrname:("psm_type")
        SETL deviceClass:(val)
        IF (name != "" AND deviceClass != "") {
            SETL device["id"]:("~exportplaceholderid-device-name-" + STR objID + "~")
            SETL device["name"]:(name)
            SETL device["deviceClass"]:(deviceClass)
            CC "Core" GET_CONNECTORS objid:(objID) out
            SETL connids:(objids)
            FOR connid in:(connids) {
                SETL obj:(map())
                CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
                LOSANT_DEVICES objID:(toobjid) struct:obj
                IF (obj.empty = 0) {
                    CC "Core" GET_CLASS_ID relation objid:(VAL connid)
                    CC "Core" GET_CLASS_NAME classid:(classid)
                    IF (classname = "hasAttribute" OR classname = "hasLocation" OR classname = "hasService") {
                        SET n:(aappend(attributes, obj))
                    }
                }
            }
            SETL device["children"]:(children)
            SETL device["attributes"]:(attributes)
            SETL device["tags"]:(tags)
        }
    } ELSIF (classname = "attribute") {
        CC "Core" GET_ATTR_VAL objid:(objID) attrname:("name")
        SETL attrName:(val)
        SETL attrType:("")
        CC "Core" GET_ATTR_VAL objid:(objID) attrname:("type")
        IF (val = "boolean") {
            SET attrType:("boolean")
        } ELSIF (val = "string") {
            SET attrType:("string")
        } ELSIF (val = "numeric") {
            SET attrType:("number")
        }
        IF (attrName != "" AND attrType != "") {
            SETL device["name"]:(attrName)
            SETL device["dataType"]:(attrType)
            SETL device["attributeTags"]:(attributeTags)
        }
    } ELSIF (classname = "location") {
        CC "Core" GET_ATTR_VAL objid:(objID) attrname:("name")
        SETL device["name"]:("position")
        SETL device["dataType"]:("gps")
        SETL device["attributeTags"]:(attributeTags)
    }

    SETL struct:(device)
}